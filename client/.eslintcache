[{"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\index.js":"1","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\App.js":"2","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Routes\\index.js":"3","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Profil.js":"4","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Home.js":"5","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\index.js":"6","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignInForm.js":"7","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignUpForm.js":"8","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Navbar.js":"9","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\Logout.js":"10","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\index.js":"11","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\user.reducer.js":"12","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Thread.js":"13","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\post.reducer.js":"14","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\users.reducer.js":"15","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\error.reducer.js":"16","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\LeftNav.js":"17","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Trends.js":"18","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\Card.js":"19","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\NewPostForm.js":"20","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\LikeButton.js":"21","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\DeleteCard.js":"22","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\CardComments.js":"23","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\EditDeleteComment.js":"24","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Favoris.js":"25","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\SearchForm.js":"26","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Newpost.js":"27","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadsFavoris.js":"28","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Reservation.js":"29","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Profil_pro.js":"30","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\Index_pro.js":"31","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignInProForm.js":"32","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignUpProForm.js":"33","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\Index_admin.js":"34","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignInAdminForm.js":"35","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignUpAdminForm.js":"36","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Gestion.js":"37","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Profil_admin.js":"38","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\LeftNavAdmin.js":"39","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Gestion_pro.js":"40","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Parametres.js":"41","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Gestion_clients.js":"42","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\User_view.js":"43","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Gestion_pubs.js":"44","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadAdmin.js":"45","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\CardAdmin.js":"46","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Ajout_admin.js":"47","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\ListAdmin.js":"48","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Bestof.js":"49","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\bestof.reducer.js":"50","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\postAction.js":"51","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\userAction.js":"52","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\usersAction.js":"53","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Profil\\UpdateInfoProfil.js":"54","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Profil\\UpdatePicture.js":"55","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\UserIdConnect.js":"56","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Utilitaires.js":"57","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\posts.reducres.js":"58","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Post_pro.js":"59","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadsPro.js":"60","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Mes_reservations.js":"61","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadClient.js":"62","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\page_accueil\\Accueil.js":"63","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\page_accueil\\globalStyles.js":"64","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\InfoData.js":"65","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\SliderData.js":"66","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\Hero.js":"67","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\Dropdown.js":"68","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\InfoSection.js":"69","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\NavBar.js":"70","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\Button.js":"71","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\MenuData.js":"72","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\NavBarPro.js":"73","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\HomePro.js":"74","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\DropdownPro.js":"75","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\GoogleMap\\Map.js":"76","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\GoogleData.js":"77","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Prisedevue.js":"78","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Pub_attente.js":"79","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadVal.js":"80","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\CardPrises.js":"81","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\ReservationForm.js":"82","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Parametre\\ParamForm.js":"83","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\paramAction.js":"84","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\param.reducer.js":"85","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Parametre\\UpdateParam.js":"86","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Parametre\\SectionForm.js":"87","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Parametre\\UpdateSection.js":"88","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\section.reducer.js":"89","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\sectionAction.js":"90","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Modal\\Modal.js":"91","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\Footer.js":"92","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\CardaddPic.js":"93","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\MsgData.js":"94"},{"size":908,"mtime":1617906086896,"results":"95","hashOfConfig":"96"},{"size":966,"mtime":1617346938445,"results":"97","hashOfConfig":"96"},{"size":2906,"mtime":1617879431062,"results":"98","hashOfConfig":"96"},{"size":1549,"mtime":1617979494143,"results":"99","hashOfConfig":"96"},{"size":1512,"mtime":1617979250385,"results":"100","hashOfConfig":"96"},{"size":1329,"mtime":1617883138657,"results":"101","hashOfConfig":"96"},{"size":2618,"mtime":1616759579616,"results":"102","hashOfConfig":"96"},{"size":7102,"mtime":1617877594599,"results":"103","hashOfConfig":"96"},{"size":3487,"mtime":1615641729474,"results":"104","hashOfConfig":"96"},{"size":804,"mtime":1617847128263,"results":"105","hashOfConfig":"96"},{"size":567,"mtime":1617039866684,"results":"106","hashOfConfig":"96"},{"size":604,"mtime":1615395553396,"results":"107","hashOfConfig":"96"},{"size":1259,"mtime":1616760889958,"results":"108","hashOfConfig":"96"},{"size":2942,"mtime":1617833699541,"results":"109","hashOfConfig":"96"},{"size":261,"mtime":1615395603597,"results":"110","hashOfConfig":"96"},{"size":1085,"mtime":1617039900563,"results":"111","hashOfConfig":"96"},{"size":1091,"mtime":1617882437640,"results":"112","hashOfConfig":"96"},{"size":2784,"mtime":1617885385694,"results":"113","hashOfConfig":"96"},{"size":21795,"mtime":1617908342720,"results":"114","hashOfConfig":"96"},{"size":11793,"mtime":1617882420416,"results":"115","hashOfConfig":"96"},{"size":1482,"mtime":1615719219765,"results":"116","hashOfConfig":"96"},{"size":506,"mtime":1617526924707,"results":"117","hashOfConfig":"96"},{"size":2763,"mtime":1617882424911,"results":"118","hashOfConfig":"96"},{"size":2090,"mtime":1615396131435,"results":"119","hashOfConfig":"96"},{"size":1116,"mtime":1617979311560,"results":"120","hashOfConfig":"96"},{"size":3011,"mtime":1617881441126,"results":"121","hashOfConfig":"96"},{"size":622,"mtime":1617979355033,"results":"122","hashOfConfig":"96"},{"size":1537,"mtime":1617880129026,"results":"123","hashOfConfig":"96"},{"size":954,"mtime":1617979543970,"results":"124","hashOfConfig":"96"},{"size":1664,"mtime":1617979446336,"results":"125","hashOfConfig":"96"},{"size":1479,"mtime":1617979520112,"results":"126","hashOfConfig":"96"},{"size":2500,"mtime":1616758934644,"results":"127","hashOfConfig":"96"},{"size":6784,"mtime":1617751320108,"results":"128","hashOfConfig":"96"},{"size":299,"mtime":1615684182818,"results":"129","hashOfConfig":"96"},{"size":2492,"mtime":1616758920741,"results":"130","hashOfConfig":"96"},{"size":5655,"mtime":1615112459268,"results":"131","hashOfConfig":"96"},{"size":16313,"mtime":1617912603069,"results":"132","hashOfConfig":"96"},{"size":1542,"mtime":1617979409956,"results":"133","hashOfConfig":"96"},{"size":1583,"mtime":1617911606305,"results":"134","hashOfConfig":"96"},{"size":6199,"mtime":1618003604363,"results":"135","hashOfConfig":"96"},{"size":2796,"mtime":1617912471388,"results":"136","hashOfConfig":"96"},{"size":5531,"mtime":1618003632444,"results":"137","hashOfConfig":"96"},{"size":3182,"mtime":1617912351372,"results":"138","hashOfConfig":"96"},{"size":1418,"mtime":1617912454899,"results":"139","hashOfConfig":"96"},{"size":1214,"mtime":1615396301500,"results":"140","hashOfConfig":"96"},{"size":11955,"mtime":1617759556164,"results":"141","hashOfConfig":"96"},{"size":7022,"mtime":1617912432708,"results":"142","hashOfConfig":"96"},{"size":4291,"mtime":1617912465299,"results":"143","hashOfConfig":"96"},{"size":976,"mtime":1617979291121,"results":"144","hashOfConfig":"96"},{"size":263,"mtime":1615395411697,"results":"145","hashOfConfig":"96"},{"size":8528,"mtime":1617879172115,"results":"146","hashOfConfig":"96"},{"size":1629,"mtime":1615397104245,"results":"147","hashOfConfig":"96"},{"size":360,"mtime":1615397085872,"results":"148","hashOfConfig":"96"},{"size":1933,"mtime":1617883076916,"results":"149","hashOfConfig":"96"},{"size":1029,"mtime":1615683437650,"results":"150","hashOfConfig":"96"},{"size":82,"mtime":1615396162619,"results":"151","hashOfConfig":"96"},{"size":1135,"mtime":1617611044376,"results":"152","hashOfConfig":"96"},{"size":270,"mtime":1615396536261,"results":"153","hashOfConfig":"96"},{"size":857,"mtime":1617979374585,"results":"154","hashOfConfig":"96"},{"size":1363,"mtime":1616364626822,"results":"155","hashOfConfig":"96"},{"size":781,"mtime":1617979343356,"results":"156","hashOfConfig":"96"},{"size":1399,"mtime":1617633257901,"results":"157","hashOfConfig":"96"},{"size":966,"mtime":1617880357983,"results":"158","hashOfConfig":"96"},{"size":324,"mtime":1615581775302,"results":"159","hashOfConfig":"96"},{"size":1165,"mtime":1616422198399,"results":"160","hashOfConfig":"96"},{"size":1777,"mtime":1616893866381,"results":"161","hashOfConfig":"96"},{"size":5272,"mtime":1617842641537,"results":"162","hashOfConfig":"96"},{"size":3075,"mtime":1617881908527,"results":"163","hashOfConfig":"96"},{"size":3011,"mtime":1617366770171,"results":"164","hashOfConfig":"96"},{"size":3006,"mtime":1617845545307,"results":"165","hashOfConfig":"96"},{"size":779,"mtime":1617841420049,"results":"166","hashOfConfig":"96"},{"size":559,"mtime":1617660738365,"results":"167","hashOfConfig":"96"},{"size":2941,"mtime":1617845624706,"results":"168","hashOfConfig":"96"},{"size":997,"mtime":1617979325290,"results":"169","hashOfConfig":"96"},{"size":3070,"mtime":1617881905680,"results":"170","hashOfConfig":"96"},{"size":2300,"mtime":1616880765696,"results":"171","hashOfConfig":"96"},{"size":6286,"mtime":1615769590366,"results":"172","hashOfConfig":"96"},{"size":243,"mtime":1616757225592,"results":"173","hashOfConfig":"96"},{"size":1311,"mtime":1617912477690,"results":"174","hashOfConfig":"96"},{"size":1278,"mtime":1616365882892,"results":"175","hashOfConfig":"96"},{"size":3741,"mtime":1617882422964,"results":"176","hashOfConfig":"96"},{"size":15524,"mtime":1617882829395,"results":"177","hashOfConfig":"96"},{"size":4442,"mtime":1617881136498,"results":"178","hashOfConfig":"96"},{"size":2461,"mtime":1617039868781,"results":"179","hashOfConfig":"96"},{"size":799,"mtime":1617016027673,"results":"180","hashOfConfig":"96"},{"size":4238,"mtime":1617881215647,"results":"181","hashOfConfig":"96"},{"size":4393,"mtime":1617882435751,"results":"182","hashOfConfig":"96"},{"size":3798,"mtime":1617882427139,"results":"183","hashOfConfig":"96"},{"size":891,"mtime":1617039873333,"results":"184","hashOfConfig":"96"},{"size":2529,"mtime":1617186749799,"results":"185","hashOfConfig":"96"},{"size":2978,"mtime":1617369854747,"results":"186","hashOfConfig":"96"},{"size":1805,"mtime":1617841926902,"results":"187","hashOfConfig":"96"},{"size":2452,"mtime":1617760927100,"results":"188","hashOfConfig":"96"},{"size":1289,"mtime":1617724295422,"results":"189","hashOfConfig":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},"1vvdbak",{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"192"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"192"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"192"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"192"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"192"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"192"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"192"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"192"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"273"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"192"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"192"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"192"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"192"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"192"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"192"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"192"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"192"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"192"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"192"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"192"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"192"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"192"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"192"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"210"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\index.js",[],["405","406"],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\App.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Routes\\index.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Profil.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Home.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\index.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignInForm.js",["407"],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody } from 'mdbreact';\n\nconst SignInForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n\n\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    const emailError = document.querySelector(\".email.error\");\n    const passwordError = document.querySelector(\".password.error\");\n    const roleError = document.querySelector(\".role.error\")\n\n    axios({\n      method: \"post\",\n      url: `${process.env.REACT_APP_API_URL}api/user/login`,\n      withCredentials: true,\n      data: {\n        email,\n        password,\n        role,\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.errors) {\n          emailError.innerHTML = res.data.errors.email;\n          passwordError.innerHTML = res.data.errors.password;\n          roleError.innerHTML = res.data.errors.role;\n        } else {\n          window.location = \"/home\";\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <MDBContainer>\n    <MDBRow>\n      <MDBCol md=\"12\">\n        <MDBCard >\n          <MDBCardBody>\n            <form action=\"\" onSubmit={handleLogin} id=\"sign-up-form\">\n              <p className=\"h4 text-center py-4\">Connexion locataire</p>\n              <div className=\"role error\"></div>\n              <div className=\"grey-text\">\n                <MDBInput\n                  label=\"email\"\n                  icon=\"envelope\"\n                  type=\"text\"\n                  name=\"email\"\n                  id=\"email\"\n                  onChange={(e) => setEmail(e.target.value)}\n                  value={email}\n                />\n                <div className=\"email error\"></div>\n                <MDBInput\n                  label=\"password\"\n                  icon=\"lock\"\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  onChange={(e) => setPassword(e.target.value)}\n                  value={password}\n                />\n                <div className=\"password error\"></div>\n              </div>\n              <div className=\"text-center py-4 mt-3\">\n                <MDBBtn type=\"submit\">\n                  Se connecter\n                </MDBBtn>\n              </div>\n            </form>\n           \n          </MDBCardBody>\n        </MDBCard>\n      </MDBCol>\n    </MDBRow>\n  </MDBContainer>\n  );\n};\n\nexport default SignInForm;\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignUpForm.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Navbar.js",[],["408","409"],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\Logout.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\index.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\user.reducer.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Thread.js",["410"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPosts } from \"../actions/postAction\";\nimport Card from \"./Post/Card\";\nimport { isEmpty } from \"./Utilitaires\";\n\nconst Thread = () => {\n  const [loadPost, setLoadPost] = useState(true);\n  const [count, setCount] = useState(5);\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.postReducer);\n\n  const loadMore = () => {\n    if (window.innerHeight + document.documentElement.scrollTop + 1 > document.scrollingElement.scrollHeight) {\n      setLoadPost(true);\n    }\n  }\n\n  useEffect(() => {\n    if (loadPost) {\n      dispatch(getPosts(count));\n      setLoadPost(false);\n      setCount(count + 5);\n    }\n\n    window.addEventListener('scroll', loadMore);\n    return () => window.removeEventListener('scroll', loadMore);\n  }, [loadPost, dispatch, count]);\n\n  return (\n    <div className=\"thread-container\">\n      <ul>\n        {!isEmpty(posts[0]) &&\n          posts.map((post) => {\n            if( (post.status === \"non_reservé\") || ( post.status === \"refusé\")) {\n               return <Card post={post} key={post._id} />;\n            }           \n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Thread;\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\post.reducer.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\users.reducer.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\error.reducer.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\LeftNav.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Trends.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\Card.js",["411","412","413","414","415","416","417","418","419","420"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { dateParser, isEmpty, shortDateParser } from \"../Utilitaires\";\nimport LikeButton from \"./LikeButton\";\nimport {deleteReserve, sendEmail, updatePost, updateStatus } from \"../../actions/postAction\";\nimport DeleteCard from \"./DeleteCard\";\nimport CardComments from \"./CardComments\";\nimport Modal from \"react-bootstrap/Modal\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { MDBCard } from 'mdbreact';\nimport Popup from \"reactjs-popup\";\nimport { useContext } from \"react\";\nimport { UidContext } from \"../UserIdConnect\";\nimport CardPrises from \"./CardPrises\";\nimport { FacebookShareButton, FacebookIcon, WhatsappShareButton, WhatsappIcon, TwitterShareButton, TwitterIcon, LinkedinShareButton, LinkedinIcon, MailruShareButton, MailruIcon, EmailShareButton, EmailIcon, InstapaperShareButton, InstapaperIcon } from 'react-share'\nimport { NavLink } from \"react-router-dom\";\nimport CardaddPic from \"./CardaddPic\";\nimport MsgData from \"../../data/MsgData\";\n\nconst Card = ({ post }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isUpdated, setIsUpdated] = useState(false);\n  const [textUpdate, setTextUpdate] = useState(null);\n  const [showComments, setShowComments] = useState(false);\n  const usersData = useSelector((state) => state.usersReducer);\n  const userData = useSelector((state) => state.userReducer);\n  const dispatch = useDispatch();\n  const uid = useContext(UidContext);\n\n  \n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenB, setIsOpenB] = useState(false);\n\n  const showModal = () => {\n    setIsOpen(true);\n  };\n\n  const showModalB = () => {\n    setIsOpenB(true);\n  };\n\n  const hideModal = () => {\n    setIsOpen(false);\n    refreshPage();\n  };\n\n  const hideModalB = () => {\n    setIsOpenB(false);\n  };\n  \n\n  const updateItem = () => {\n    if (textUpdate) {\n      dispatch(updatePost(post._id, textUpdate));\n    }\n    setIsUpdated(false);\n  };\n\n  useEffect(() => {\n    !isEmpty(usersData[0]) && setIsLoading(false);\n  }, [usersData]);\n\n  const valideReservation = () => {\n    dispatch(updateStatus(post._id, post.message, \"reservé\", post.clientId));\n    {!isEmpty(usersData[0]) &&\n      usersData.map((user) => {\n      if (user._id === post.clientId) {\n        dispatch(sendEmail(user.email, user.pseudo, MsgData[3].subject, MsgData[3].text))\n      }})\n    }\n  }\n\n  const refuseReservation = () => {\n    dispatch(updateStatus(post._id, post.message, \"refusé\", post.clientId));\n    {!isEmpty(usersData[0]) &&\n      usersData.map((user) => {\n      if (user._id === post.clientId) {\n        dispatch(sendEmail(user.email, user.pseudo, MsgData[4].subject, MsgData[4].text))\n      }})\n    }\n    post.reservations.map((reservation) => {\n      dispatch(deleteReserve(post._id, reservation._id));\n    })\n    window.location.reload(false);\n  }\n\n  const soumission = () => {\n    dispatch(updateStatus(post._id, post.message, \"validation\"));\n  } \n\n  const annuleReservation = () => {\n    dispatch(updateStatus(post._id, post.message, \"non_reservé\"));\n    {!isEmpty(usersData[0]) &&\n      usersData.map((user) => {\n      if (post.posterId === user._id) {\n        dispatch(sendEmail(user.email, user.pseudo, MsgData[5].subject, MsgData[5].text))\n      }})\n    }\n    post.reservations.map((reservation) => {\n            dispatch(deleteReserve(post._id, reservation._id));\n    \n    })\n  }\n\n  const status = () => {\n    if (post.status === 'reservé') {\n      return (<span style={{fontSize:'12px', backgroundColor:'#2ed573', borderRadius:\"4px 8px\"}}>Réservé</span>)\n    } else if (post.status === 'attente') {\n      return (\n        <div>\n          <span style={{fontSize:'12px', backgroundColor:'#25fde9', borderRadius:\"4px 8px\"}}>En attente</span>\n          \n          <form action=\"\" onClick={valideReservation}>\n            <button type=\"submit\" >Valider</button>\n          </form>\n             \n          {\" \"}\n          <form action=\"\" onClick={refuseReservation}>\n            <button type=\"button\" >Refuser</button>\n          </form>\n        </div>\n        )\n    } else if (post.status === 'annulé') {\n      return (<span style={{fontSize:'12px', backgroundColor:'#ff9f1a', borderRadius:\"4px 8px\"}}>Annulé</span>)\n    } else if (post.status === 'non_reservé') {\n      return (<span style={{fontSize:'12px', backgroundColor:'#ff9f1a', borderRadius:\"4px 8px\"}}>Non reservé</span>)\n    } else if (post.status === 'refusé') {\n      return (<span style={{fontSize:'12px', backgroundColor:'#ff9f1a', borderRadius:\"4px 8px\"}}>Non reservé</span>)\n    } else if ((post.status === 'ajout_images') && (post.picture.length < 5)) {\n      return (<span style={{fontSize:'12px', fontWeight: 'bolder'}}> Vous avez {post.picture.length} image{post.picture.length < 2 ? \"\": \"s\"}</span>)\n    } else if ((post.status === 'ajout_images') && (post.picture.length === 5)) {\n      return (\n        <form action=\"\" onClick={soumission}>\n          <button type=\"submit\" >Soumettre</button>\n      </form>\n      )\n    }\n  }\n\n  const afficheReservButton = () =>\n  {\n      if (((userData.role !== 'propriétaire') && (post.status === \"non_reservé\")) || ((userData.role !== 'propriétaire') && (post.status === \"refusé\")) ) {\n         return (\n          <NavLink to={{\n            pathname:'/reservation',\n            search:`id=${post._id}` \n          }} exact >\n            <img \n            width=\"25px\"\n            src=\"./img/calendar.png\" \n            alt=\"reserve\" \n            data-toggle=\"modal\" \n            data-target=\"#exampleModal\"/>   \n          </NavLink>  \n        )\n      } else if((userData.role !== 'propriétaire') && (post.clientId === userData._id) && (post.status === \"attente\")) {\n          return (\n            <div>\n            <span style={{fontSize:'12px'}}>\n              status : <span style={{backgroundColor:'#25fde9', borderRadius:\"4px 8px\"}}>En attente de validation</span>\n            </span>\n            <br/>\n            <form action=\"\"  onClick={() => {\n              if (window.confirm(\"Voulez-vous annuler votre demande de reservation ?\")) {\n                annuleReservation();\n              }\n            }}\n            >\n              <button type=\"submit\" titre=\"Annuler la reservation\" >Annuler</button>\n            </form>\n          </div>\n          )\n      } else if((userData.role !== 'propriétaire') && (post.clientId !== null) && (post.status === \"reservé\")) {\n        return (\n          <div>\n          <span style={{fontSize:'12px'}}>\n            status : <span style={{backgroundColor:'#2ed573', borderRadius:\"4px 8px\"}}>Reservé &#128521;</span>\n          </span>\n        </div>\n        )\n    }  else if((userData.role !== 'propriétaire') && (post.clientId !== null) && (post.status === \"refusé\")) {\n      return (\n        <div>\n        <span style={{fontSize:'12px'}}>\n          status : <span style={{backgroundColor:'#ff4757', borderRadius:\"4px 8px\"}}>Refus</span>\n        </span>\n      </div>\n      )\n    } else if((userData.role !== 'propriétaire') && (post.clientId !== null) && (post.status === \"annulé\")) {\n      return (\n        <div>\n        <span style={{fontSize:'12px'}}>\n          status : <span style={{backgroundColor:'#ff4757', borderRadius:\"4px 8px\"}}>Votre reservation a été annulée</span>\n        </span>\n      </div>\n      )\n    } else if (userData.role === 'propriétaire'){\n          return (\n            <div>\n              <span style={{fontSize:'12px'}}>\n                status : {status()}\n              </span>\n            </div>\n          )  \n      }    \n  }\n\n  const ajoutImg = () => {\n    \n      return (\n            <>\n              <div onClick={showModalB} style={{cursor:'pointer'}}  title=\"Voir toutes les images\">\n                 <i className=\"fas fa-image\"></i>\n              </div>\n              <Modal show={isOpenB} onHide={hideModalB}>\n                <Modal.Header>\n                  <Modal.Title>Images</Modal.Title>\n                </Modal.Header>\n                <Modal.Body> <CardaddPic post={post} key={post._id} /></Modal.Body>\n                <Modal.Footer>\n                  <button onClick={hideModalB}>Fermer</button>\n                </Modal.Footer>\n              </Modal>\n            </>\n      ) \n   \n  }\n\n  const dateReservation = () => {\n    {!isEmpty(post.reservations[0]) &&\n      post.reservations.map((reservation) => {\n        return <h1>{shortDateParser(reservation.date_open)}</h1>\n    })\n  }}\n\n  const ficheLocataire = () => {\n    if ((post.clientId !== null) && (userData.role === 'propriétaire') ) {\n      return (\n              <Popup\n                trigger={<i class=\"fas fa-address-card\" title=\"fiche locataire\"></i>}\n                position={[\"bottom right\"]}\n                closeOnDocumentClick>\n                <div>\n                  {!isEmpty(usersData[0]) && \n                    usersData.map((user) => {\n                        if (user._id === post.clientId) {\n                          return (\n                            <>\n                              <p>\n                                Pseudo : {user.pseudo} \n                                         {  (post.status === \"reservé\") &&\n                                            <img src=\"./img/check.png\" alt=\"\"/>\n                                         }\n                                         {  (post.status === \"refusé\") &&\n                                            <img src=\"./img/close.png\" alt=\"\"/>\n                                         }\n                                         {  (post.status === \"attente\") &&\n                                            <img src=\"./img/Spinner.svg\" alt=\"\"/>\n                                         }\n                                         <br/>\n                                {user.email} <br/> \n                                Tel : {user.tel}\n                              </p>\n                            </>\n                          )\n                        }\n                    })\n                  }\n                </div>\n              </Popup>\n      \n      )\n    } else if (post.clientId === null){\n      <div>vfv</div>\n    }\n    \n  }\n\n  const refreshPage = () => {\n    window.location.reload(false);\n  }\n\n \n\n  return (\n    <div>\n      <MDBCard style={{backgroundColor: '#f5f6fa'}}>\n        <li className=\"container\" key={post._id}>\n          {isLoading ? (\n            <i className=\"fas fa-spinner fa-spin\"></i>\n          ) : (\n              <>\n                <div className=\"round\">\n                  <h6 style={{paddingTop: '3px'}}>\n                    <div className=\"row\">\n                      <div className=\"col-6\">\n                        <img height=\"40\" width=\"40\" style={{ borderRadius: \"50%\" }}\n                          src={\n                            !isEmpty(usersData[0]) &&\n                            usersData\n                              .map((user) => {\n                                if (user._id === post.posterId) return user.picture;\n                                else return null;\n                              })\n                              .join(\"\")\n                          }\n                          alt=\"poster-pic\"\n                        />\n                        {\"  \"}\n                        {!isEmpty(usersData[0]) &&\n                          usersData\n                            .map((user) => {\n                              if (user._id === post.posterId) return user.pseudo;\n                              else return null;\n                            })\n                            .join(\"\")}\n                      </div>\n                      <div className=\"col-6\">\n                        <div className=\"col-sm\" style={{textAlign:'right'}}>\n                        \n                          <img onClick={showModal} style={{cursor:'pointer'}} src=\"./img/camera.png\" title=\"Prise de vue locataire\"  alt=\"\"/>\n                          <Modal show={isOpen} onHide={hideModal}>\n                            <Modal.Header>\n                              <Modal.Title>Prise de vue et activités à proximité</Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body><CardPrises post={post} key={post._id} /></Modal.Body>\n                            <Modal.Footer>\n                              <button onClick={hideModal}>Fermer</button>\n                            </Modal.Footer>\n                          </Modal>\n                          \n                          <br/>\n                          {ajoutImg()}\n                          {ficheLocataire()}\n                          </div>\n                      </div>\n                    </div>\n                  </h6>\n                </div>\n                <div>\n                <h6 style={{fontWeight:\"bold\"}}>{post.titre}</h6>\n                  <div className=\"row\" >\n                    <div className=\"col-sm\">\n                      <>\n                          {post.picture[0] !== \"\" && (\n                            <img height=\"200\" style={{borderRadius: '10px'}} width=\"100%\" src={post.picture[0]} alt=\"card-pic\" className=\"card-pic\" />\n                          )}\n                          {post.video && (\n                            \n                            <iframe\n                              width=\"100%\"\n                              height=\"200\"\n                              style={{borderRadius: '10px', paddingTop: '5px'}}\n                              src={post.video}\n                              frameBorder=\"0\"\n                              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                              allowFullScreen\n                              title={post._id}\n                            ></iframe>\n                          )}\n                     \n                        </>\n                      \n                      {isUpdated && (\n                        <div className=\"update-post\">\n                          <textarea\n                            defaultValue={post.message}\n                            onChange={(e) => setTextUpdate(e.target.value)}\n                          />\n                          <div className=\"button-container\">\n                            <button className=\"btn\" onClick={updateItem}>\n                              Valider modification\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                      <div style={{\n                          position: 'relative',\n                          bottom: '22px',\n                          right: '0px',\n                          display: 'flex',\n                          zIndex: 10,\n                          backgroundColor: 'rgba(0, 0, 0, 0.6)',\n                          color: 'white',\n                          width : '25px',\n                          borderRadius: '50px',\n                          fontWeight: 'bolder',\n                          paddingLeft: '8px'\n                          }}>\n                            {post.picture.length}\n                          </div>\n                    </div>\n                    <div className=\"col-sm\">\n                      <span style={{fontSize:\"12px\"}}>{dateParser(post.createdAt)}</span>\n                      {isUpdated === false && <p>{post.message}</p>}\n                      <span style={{fontSize:\"12px\", color:'darkkhaki'}}>{post.type}</span><br/>\n                      <span style={{fontSize:\"12px\", color:'darkkhaki'}}>{post.prix} € la nuité</span><br/>\n                      <span style={{fontSize:\"12px\", color:'darkkhaki'}}>{post.nbr_personne} personne{post.nbr_personne > 1 ? \"s\" : \"\"}</span><br/>\n                      <span style={{fontSize:\"12px\", color:'darkkhaki'}}>{post.departement}</span><br/>\n                      <span style={{fontSize:\"12px\", color:'darkkhaki'}}>Disponible du {shortDateParser(post.date_open)} au {shortDateParser(post.date_close)}</span><br/>\n                      <span style={{fontSize:\"12px\", fontWeight: 'bolder'}}> {post.reservations ? \n                                                        post.reservations.map((reserve) => {\n                                                          return (<><span>Reservation du {shortDateParser(reserve.date_open)} au {shortDateParser(reserve.date_close)}</span></>)\n                                                          \n                                                        }) : null\n                                                      }\n                      </span>\n                      \n                      {dateReservation()}\n                    </div>\n                  </div>\n                  {userData._id === post.posterId && (\n                    <div className=\"container\">\n                      <div onClick={() => setIsUpdated(!isUpdated)}>\n                      <i className=\"fas fa-edit\"></i>\n                      </div>\n                      <DeleteCard id={post._id} />\n                    </div>\n                  )}\n                  <div className=\"row\">\n                  <div className=\"col-sm\">\n                      <span style={{fontSize:'12px'}}></span>\n                          <i onClick={() => setShowComments(!showComments)} className=\"fas fa-comment\"></i>  {post.comments.length}\n                      \n                  </div>\n                    <div className=\"col-sm\">\n                      <LikeButton post={post} />\n                    </div>\n                    <div className=\"col-sm\">\n                      {uid === null && (\n                        <Popup\n                          trigger={<img \n                            width=\"25px\"\n                            src=\"./img/calendar.png\" alt=\"reserve\" />}\n                          position={[\"bottom center\", \"bottom right\", \"bottom left\"]}\n                          closeOnDocumentClick>\n                          <div>Connectez-vous pour faire une reservation!</div>\n                        </Popup>\n\n                      )}\n                      {uid && (\n                       afficheReservButton()\n                        )}   \n                    </div>\n                    <div className=\"col-sm\">\n                    <Popup\n                      trigger={<img \n                        width=\"15px\"\n                        title=\"Partager\"\n                        src=\"./img/share.png\" alt=\"share\" />}\n                      position={[\"top left\"]}\n                      size={[\"Nano - 10%\"]}\n                      closeOnDocumentClick>\n                        <FacebookShareButton\n                          url={`http://localhost:3000/reservation?id=${post._id}`}\n                          quote={\"Hey !!!!\"}\n                          hashtag=\"#atyipkhouseG4\" \n                        >\n                          <FacebookIcon size='20px' logoFillColor='white' round={true}></FacebookIcon>\n                        </FacebookShareButton>\n                        {\" \"}\n                        <WhatsappShareButton\n                          url={`http://localhost:3000/reservation?id=${post._id}`}\n                          quote={\"Hey !!!!\"}\n                          hashtag=\"#atyipkhouseG4\"\n                        >\n                          <WhatsappIcon  size='20px' logoFillColor='white' round={true}></WhatsappIcon>\n                        </WhatsappShareButton>\n                        {\" \"}\n                        <TwitterShareButton\n                          url={`http://localhost:3000/reservation?id=${post._id}`}\n                          quote={\"Hey !!!!\"}\n                          hashtag=\"#atyipkhouseG4\"\n                        >\n                          <TwitterIcon size='20px' logoFillColor='white' round={true}></TwitterIcon>\n                        </TwitterShareButton>\n                        {\" \"}\n                        <LinkedinShareButton\n                          url={`http://localhost:3000/reservation?id=${post._id}`}\n                          quote={\"Hey !!!!\"}\n                          hashtag=\"#atyipkhouseG4\"\n                        >\n                          <LinkedinIcon size='20px' logoFillColor='white' round={true}></LinkedinIcon>\n                        </LinkedinShareButton>\n                        {\" \"}\n                        <MailruShareButton\n                          url={`http://localhost:3000/reservation?id=${post._id}`}\n                          quote={\"Hey !!!!\"}\n                          hashtag=\"#atyipkhouseG4\"\n                        >\n                          <MailruIcon size='20px' logoFillColor='white' round={true}></MailruIcon>\n                        </MailruShareButton>\n                        {\" \"}\n                        <EmailShareButton\n                          url={`http://localhost:3000/reservation?id=${post._id}`}\n                          quote={\"Hey !!!!\"}\n                          hashtag=\"#atyipkhouseG4\"\n                        >\n                          <EmailIcon size='20px' logoFillColor='white' round={true}></EmailIcon>\n                        </EmailShareButton>\n                        {\" \"}\n                        <InstapaperShareButton\n                          url={`http://localhost:3000/reservation?id=${post._id}`}\n                          quote={\"Hey !!!!\"}\n                          hashtag=\"#atyipkhouseG4\"\n                        >\n                          <InstapaperIcon size='20px' logoFillColor='white' round={true}></InstapaperIcon>\n                        </InstapaperShareButton>\n                        \n                    </Popup>\n\n                    </div>\n\n                  </div>\n                  {showComments && <CardComments post={post} />}\n                </div>\n              </>\n            )}\n        </li>\n      </MDBCard>\n    </div>\n  );\n};\n\nexport default Card;\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\NewPostForm.js",["421","422"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isEmpty } from \"../Utilitaires\";\nimport { addPost, getPosts } from \"../../actions/postAction\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody} from 'mdbreact';\nimport {GoogleData } from \"../../data/GoogleData\";\n\n\nconst NewPostForm = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [formSubmit, setFormSubmit] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [titre, setTitre] = useState(\"\");\n  const [superficie, setSuperficie] = useState(\"\");\n  const [prix, setPrix] = useState(\"\");\n  const [date_open, setDate_open] = useState(\"\");\n  const [date_close, setDate_close] = useState(\"\");\n  const [departement, setDepartement] = useState(\"\");\n  const [lng, setLng] = useState(\"\");\n  const [lat, setLat] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [nbr_personne, setNbr_personne] = useState(\"\");\n  const status = 'ajout_images';\n  const clientId = null;\n  const [postPicture, setPostPicture] = useState(\"\");\n  const [video, setVideo] = useState(\"\");\n  const [file, setFile] = useState([]);\n  const userData = useSelector((state) => state.userReducer);\n  const error = useSelector((state) => state.errorReducer.postError);\n  const dispatch = useDispatch();\n\n  const [selectedImages, setSelectedImages] = useState([])\n  const imageHandleChange = (e) => {\n      if(e.target.files) {\n        const fileArray = Array.from(e.target.files).map((file) => URL.createObjectURL(file))\n       \n        setSelectedImages((prevImages) =>prevImages.concat(fileArray));\n        setFile(e.target.files[0]);\n      }\n\n  };\n  const renderPhotos = (source) => {\n\t\treturn source.map((photo) => {\n\t\t\treturn <img height=\"200px\" width=\"50%\" src={photo} alt=\"\" key={photo} />;\n\t\t});\n\t};\n  /*\n  const handlePicture = (e) => {\n    setPostPicture(URL.createObjectURL(e.target.files[0]));\n    setFile(e.target.files[0]);\n    setVideo('');\n  }; \n  */\n\n  const handlePost = async (e) => {\n    e.preventDefault();\n    if (message || postPicture || video) {\n      const data = new FormData();\n      data.append('posterId', userData._id);\n      data.append('message', message);\n      data.append('titre', titre);\n      data.append('superficie', superficie);\n      data.append('prix', prix);\n      data.append('date_open', date_open);\n      data.append('date_close', date_close);\n      data.append('departement', departement);\n      data.append('lng', lng);\n      data.append('lat', lat);\n      data.append('type', type);\n      data.append('status', status);\n      data.append('clientId', clientId);\n      data.append('nbr_personne', nbr_personne);\n      if (file) data.append(\"file\", file);\n      data.append('video', video);\n      await dispatch(addPost(data));\n      dispatch(getPosts());\n      cancelPost();\n      setFormSubmit(true);\n    } else {\n      alert(\"Veuillez entrer toutes les informations \")\n    }\n  };\n \n  const cancelPost = () => {\n    setMessage(\"\");\n    setTitre(\"\");\n    setSuperficie(\"\");\n    setPrix(\"\");\n    setDate_open(\"\");\n    setDate_close(\"\");\n    setDepartement(\"\");\n    setLat(\"\");\n    setLng(\"\");\n    setType(\"\");\n    setPostPicture(\"\");\n    setVideo(\"\");\n    setFile(\"\");\n    setSelectedImages(\"\");\n  };\n\n\n  useEffect(() => {\n    if (!isEmpty(userData)) setIsLoading(false);\n\n    const handleVideo = () => {\n      let findLink = message.split(\" \");\n      for (let i = 0; i < findLink.length; i++) {\n        if (\n          findLink[i].includes(\"https://www.yout\") ||\n          findLink[i].includes(\"https://yout\")\n        ) {\n          let embed = findLink[i].replace(\"watch?v=\", \"embed/\");\n          setVideo(embed.split(\"&\")[0]);\n          findLink.splice(i, 1);\n          setMessage(findLink.join(\" \"));\n          setPostPicture('');\n        }\n      }\n    };\n    handleVideo();\n  }, [userData, message, video]);\n\n  return (\n    <>\n      {formSubmit ? (\n         <>\n         <h4 className=\"success\" style={{textAlign:'center', paddingTop:'15%'}}>\n             Votre publication a bien été enregistrée, rendez-vous dans la rubrique \"Mes offres\" pour ajouter 4 autres images.\n             <br/> Ce nombre d'image est requis suite a une expérience des locataires. \n             <br/>\n             Après cette étape, votre publication devra être valider par notre équipe, pour figurer sur liste des offres.\n         </h4>\n         <div class=\"success-animation\">\n             <svg class=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\"><circle class=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\" /><path class=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\" /></svg>\n         </div>\n         \n         <span></span>\n         </>\n      ) : (\n        <>\n    <MDBContainer>\n    <MDBRow>\n      <MDBCol md=\"12\">\n        <MDBCard >\n          <MDBCardBody>\n            <p style={{backgroundColor:'#ff9f1a'}}>Déposer votre annonce</p>\n            <form action=\"\" enctype=\"multipart/form-data\" >\n              <div className=\"grey-text\">\n                <MDBInput\n                required\n                  label=\"titre\"\n                  type=\"text\"\n                  name=\"titre\"\n                  id=\"titre\"\n                  onChange={(e) => setTitre(e.target.value)}\n                  value={titre}\n                />\n                <br/>\n                  <select  name=\"type\" id=\"type\" onChange={(e) => setType(e.target.value)} value={type}  class=\"browser-default custom-select\" >\n                    <option value=\"\">----- Type -----</option>\n                    <option value=\"cabane dans les arbres\">cabane dans les arbres</option>\n                    <option value=\"cabane flottante\">cabane flottante</option>\n                    <option value=\"yourte\">yourte</option>\n                    <option value=\"yourte\">Autre</option>\n                  </select>\n               \n                <MDBInput\n                  label=\"superficie (m²)\"\n                  type=\"number\"\n                  name=\"superficie\"\n                  id=\"superficie\"\n                  onChange={(e) => setSuperficie(e.target.value)}\n                  value={superficie}\n                />\n                <br/>\n                <select  name=\"departement\" id=\"departement\" onChange={(e) => setDepartement(e.target.value)} value={departement}  class=\"browser-default custom-select\" >\n                          <option value=\"\">--- Département ---</option>\n                    {GoogleData.sort((a, b) => {\n                      if(a.name < b.name) return -1;\n                      if(a.name > b.name) return 1;\n                    }).map((val, key) => {\n                      return (\n                          <option value={val.name} key={key}>{val.name}</option>\n                          )\n                      })} \n                </select>\n                <div className=\"row\">\n                  <div className=\"col-6\">\n                    <MDBInput\n                      label=\"Longitude\"\n                      type=\"number\"\n                      name=\"lng\"\n                      id=\"lng\"\n                      onChange={(e) => setLng(e.target.value)}\n                      value={lng}\n                    />\n                  </div>\n                  <div className=\"col-6\">\n                    <MDBInput\n                      label=\"Latitude\"\n                      type=\"number\"\n                      name=\"lat\"\n                      id=\"lat\"\n                      onChange={(e) => setLat(e.target.value)}\n                      value={lat}\n                    />\n                  </div>\n                </div>\n                <MDBInput\n                  label=\"prix (€) /nuit\"\n                  type=\"number\"\n                  name=\"prix\"\n                  id=\"prix\"\n                  onChange={(e) => setPrix(e.target.value)}\n                  value={prix}\n                />\n                <MDBInput\n                required\n                  label=\"nombre de personne\"\n                  type=\"number\"\n                  name=\"nbr_personne\"\n                  id=\"nbr_personne\"\n                  onChange={(e) => setNbr_personne(e.target.value)}\n                  value={nbr_personne}\n                />\n                <MDBInput\n                required\n                  label=\"Date début de disponibilité\"\n                  type=\"date\"\n                  name=\"date_open\"\n                  id=\"date_open\"\n                  onChange={(e) => setDate_open(e.target.value)}\n                  value={date_open}\n                />\n                <MDBInput\n                required\n                  label=\"Date fin de disponibilité\"\n                  type=\"date\"\n                  name=\"date_close\"\n                  id=\"date_close\"\n                  onChange={(e) => setDate_close(e.target.value)}\n                  value={date_close}\n                />\n                <textarea \n                  class=\"form-control rounded-0\" \n                  id=\"exampleFormControlTextarea2\" \n                  rows=\"3\"\n                  name=\"message\"\n                  placeholder=\"Décrivez votre offre...\"\n                  onChange={(e) => setMessage(e.target.value)}\n                  value={message}\n                ></textarea>\n              </div>\n              <div className=\"footer-form\">\n                  <div className=\"icon\">\n                    {isEmpty(video) && (\n                      <>\n                        <input\n                          required\n                          type=\"file\"\n                          id=\"file\"\n                          name=\"file\"\n                          accept=\".jpg, .jpeg, .png\"\n                          onChange={imageHandleChange}\n                        />\n                      </>\n                    )}\n                    {video && (\n                      <MDBBtn onClick={() => setVideo(\"\")}>Supprimer video</MDBBtn>\n                    )}\n                  </div>\n                  {!isEmpty(error.format) && <p>{error.format}</p>}\n                  {!isEmpty(error.maxSize) && <p>{error.maxSize}</p>}\n                  <div className=\"btn-send\">\n                    {message || selectedImages || video.length > 20 ? (\n                      <MDBBtn className=\"cancel\" onClick={cancelPost}>\n                        Annuler la plublication\n                      </MDBBtn>\n                    ) : null}\n                    <MDBBtn type=\"submit\" onClick={handlePost}>\n                      Envoyer\n                    </MDBBtn>\n                  </div>\n              </div>\n            </form>\n          </MDBCardBody>\n        </MDBCard>\n        <MDBCard>\n            <MDBCardBody>\n              <p style={{backgroundColor:'#ff9f1a'}}>Aperçu des images</p>\n                  {message || selectedImages || video.length > 20 ? (\n                \n                <div className=\"right\">\n                    <div className=\"content\">\n                      <div className=\"row\">\n                        {renderPhotos(selectedImages)}\n                      </div>\n                      \n                      {video && (\n                        <iframe\n                          src={video}\n                          frameBorder=\"0\"\n                          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                          allowFullScreen\n                          title={video}\n                        ></iframe>\n                      )}\n                    </div>\n                </div>\n              \n              ) : null}\n            </MDBCardBody>\n          </MDBCard>\n      </MDBCol>\n    </MDBRow>\n  </MDBContainer>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default NewPostForm;\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\LikeButton.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\DeleteCard.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\CardComments.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\EditDeleteComment.js",[],["423","424"],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Favoris.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\SearchForm.js",["425","426"],"import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isEmpty } from \"../Utilitaires\";\r\nimport Card from \"./Card\";\r\n\r\nconst SearchForm = () => {\r\n  const posts = useSelector((state) => state.postReducer);\r\n  const [searcharr, setSearcharr] = useState('')\r\n  const [searchdep, setSearchdep] = useState('')\r\n  const [type, setType] = useState('')\r\n\r\n  const refrechSearch = () => {\r\n    setSearcharr('');\r\n    setSearchdep('');\r\n    setType('');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div className=\"row\">\r\n        \r\n      <div className=\"col-12\">\r\n        <label style={{color:'#f39200'}}>Date d'arriver</label>\r\n        <input\r\n          htmlFor=\"date_arr\"\r\n          type=\"date\"\r\n          id=\"date_arr\"\r\n          onChange={e => setSearcharr(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"col-12\">\r\n        <label style={{color:'#f39200'}}>Date de départ</label>\r\n          <input\r\n            htmlFor=\"date_dep\"\r\n            type=\"date\"\r\n            id=\"date_dep\"\r\n            onChange={e => setSearchdep(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <select onChange={(e) => setType(e.target.value)} name=\"type\" id=\"type\"  class=\"browser-default custom-select\" >\r\n            <option value=\"\">Tous</option>\r\n            <option value=\"cabane dans les arbres\">cabane dans les arbres</option>\r\n            <option value=\"cabane flottante\">cabane flottante</option>\r\n            <option value=\"yourte\">yourte</option>\r\n            <option value=\"\">Autre</option>\r\n          </select> \r\n       </div>\r\n       <div className=\"col-6\"></div>\r\n        <div className=\"col-2\">\r\n            <i title=\"Rafraîchir\" onClick={refrechSearch} class=\"fas fa-sync-alt\"></i>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        {!isEmpty(posts[0]) &&\r\n          posts.map((post) => {\r\n            if((post.status === \"non_reservé\")) {\r\n              if (\r\n                (((searcharr < post.date_open) || (post.date_close > searcharr))\r\n                && (searcharr > post.date_open))\r\n                \r\n              ) {\r\n                if (searchdep <= post.date_close) {\r\n                  return (\r\n                  <div>\r\n                    <p style={{ color: '#f39200', fontWeight: 'bold' }}>Disponible</p>\r\n                    <Card post={post} key={post._id} />\r\n                  </div>\r\n\r\n                )\r\n                }\r\n              \r\n                \r\n                }\r\n              \r\n              }}\r\n          )}\r\n      </div>\r\n      <div>\r\n      {!isEmpty(posts[0]) && \r\n        posts.map((post) => {\r\n          if( (post.type === type) && (post.status === \"non_reservé\")) {\r\n              return (\r\n                <div>\r\n                  <p style={{ color: 'green' }}>{post.type}</p>\r\n                  <Card post={post}key={post._id} />\r\n                </div>\r\n                )\r\n          }\r\n        })\r\n      }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Newpost.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadsFavoris.js",["427"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getPosts } from \"../actions/postAction\";\r\nimport Card from \"./Post/Card\";\r\nimport { isEmpty } from \"./Utilitaires\";\r\n\r\nconst ThreadsFavoris = () => {\r\n  const [loadPost, setLoadPost] = useState(true);\r\n  const [count, setCount] = useState(5);\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.postReducer);\r\n  const userData = useSelector((state) => state.userReducer);\r\n\r\n  const loadMore = () => {\r\n    if (window.innerHeight + document.documentElement.scrollTop + 1 > document.scrollingElement.scrollHeight) {\r\n      setLoadPost(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (loadPost) {\r\n      dispatch(getPosts(count));\r\n      setLoadPost(false);\r\n      setCount(count + 5);\r\n    }\r\n\r\n    window.addEventListener('scroll', loadMore);\r\n    return () => window.removeEventListener('scroll', loadMore);\r\n  }, [loadPost, dispatch, count]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <ul>\r\n        {userData.likes ? (\r\n          !isEmpty(posts[0]) &&\r\n              posts.map((post) => {\r\n                for (let i = 0; i < userData.likes.length; i++) {\r\n                  if (post._id === userData.likes[i]) {\r\n                    return <Card post={post} key={post._id} />;\r\n                  }\r\n                }\r\n              })\r\n        ) : <p>Votre liste de favoris est vide</p>}\r\n            \r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThreadsFavoris;\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Reservation.js",["428"],"import React, {useState} from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport ReservationForm from '../components/Post/ReservationForm'\r\nimport { isEmpty } from '../components/Utilitaires'\r\nimport NavBar from '../components/PageAccueil/NavBar';\r\nimport Dropdown from '../components/PageAccueil/Dropdown';\r\n\r\nconst Reservation = (props) => {\r\n  const posts = useSelector(state => state.postReducer)\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n    <NavBar toggle={toggle}/>\r\n    <Dropdown isOpen={isOpen} toggle={toggle}/>\r\n    <div className=\"container\" style={{paddingTop: '60px'}}>\r\n      {!isEmpty(posts[0]) &&\r\n      posts.map((post, key) => {\r\n        if (`?id=${post._id}` === props.location.search) {\r\n          return <ReservationForm post={post} key={post._id} /> \r\n        }})}\r\n    </div>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Reservation\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Profil_pro.js",["429"],"import React, { useContext, useState } from \"react\";\r\nimport Index_pro from \"../components/Log/Index_pro\";\r\nimport { UidContext } from \"../components/UserIdConnect\";\r\nimport UpdateInfoProfil from \"../components/Profil/UpdateInfoProfil\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"../style/index.css\"\r\nimport NavBarPro from \"../components/PageAccueil/NavBarPro\";\r\nimport DropdownPro from \"../components/PageAccueil/DropdownPro\";\r\nimport LeftNav from \"../components/LeftNav\";\r\n\r\nconst Profil_pro = () => {\r\n  const uid = useContext(UidContext);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => {\r\n      setIsOpen(!isOpen);\r\n    };\r\n\r\n  return (\r\n    <>\r\n    <NavBarPro toggle={toggle}/>\r\n    <DropdownPro isOpen={isOpen} toggle={toggle}/>\r\n    <div className=\"container\" style={{paddingTop: '60px'}} >\r\n      <div className=\"row\">\r\n          <div className=\"col-2\">\r\n            <LeftNav />\r\n          </div>\r\n          <div className=\"col-10\">\r\n            <div>\r\n              {uid ? (\r\n                <UpdateInfoProfil />\r\n              ) : (\r\n                <>\r\n                  <div className=\"row\" >\r\n                    <div className=\"col-sm\">\r\n                      <Index_pro signin={true} signup={false} />\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <img width=\"100%\" height=\"100%\" src=\"./img/imag_2.svg\" alt=\"imag_1\"/>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                </>\r\n                )}\r\n              </div>\r\n            </div>\r\n      </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profil_pro;\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\Index_pro.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignInProForm.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignUpProForm.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\Index_admin.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignInAdminForm.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Log\\SignUpAdminForm.js",[],["430","431"],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Gestion.js",["432","433","434"],"import { MDBBtn } from \"mdbreact\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { deleteParam } from \"../../actions/paramAction\";\r\nimport { deleteSection } from \"../../actions/sectionAction\";\r\nimport LeftNavAdmin from \"../../components/LeftNavAdmin\";\r\nimport Hero from \"../../components/PageAccueil/Hero\";\r\nimport InfoSection from \"../../components/PageAccueil/InfoSection\";\r\nimport ParamForm from \"../../components/Parametre/ParamForm\";\r\nimport SectionForm from \"../../components/Parametre/SectionForm\";\r\nimport UpdateParam from \"../../components/Parametre/UpdateParam\";\r\nimport UpdateSection from \"../../components/Parametre/UpdateSection\";\r\nimport { isEmpty } from \"../../components/Utilitaires\";\r\nimport { InfoData } from \"../../data/InfoData\";\r\nimport { SliderData } from \"../../data/SliderData\";\r\nimport GlobalStyle from \"../page_accueil/globalStyles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst Gestion = () => {\r\n    const dispatch = useDispatch();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const usersData = useSelector((state) => state.usersReducer);\r\n    const userData = useSelector((state) => state.userReducer);\r\n    const paramData = useSelector((state) => state.paramReducer);\r\n    const sectionData = useSelector((state) => state.sectionReducer);\r\n    const [open, setOpen] = useState(false);\r\n    const [ slideToUpdate,setSlideToUpdate] =  useState(\"\");\r\n\r\n    const [openSection, setOpenSection] = useState(false);\r\n    const [ sectionToUpdate,setSectionToUpdate] =  useState(\"\");\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isOpenB, setIsOpenB] = useState(false);\r\n    const [isOpenC, setIsOpenC] = useState(false);\r\n    const [isOpenD, setIsOpenD] = useState(false);\r\n    const [isOpenE, setIsOpenE] = useState(false);\r\n    const [isOpenF, setIsOpenF] = useState(false);\r\n\r\n\r\n    const showModal = () => {\r\n        setIsOpen(true);\r\n    };\r\n    const showModalB = () => {\r\n        setIsOpenB(true);\r\n    };\r\n    const showModalC = () => {\r\n        setIsOpenC(true);\r\n    };\r\n    const showModalD = () => {\r\n        setIsOpenD(true);\r\n    };\r\n    const showModalE = () => {\r\n        setIsOpenE(true);\r\n    };\r\n    const showModalF = () => {\r\n        setIsOpenF(true);\r\n    };\r\n\r\n\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n    const hideModalB = () => {\r\n        setIsOpenB(false);\r\n    };\r\n    const hideModalC = () => {\r\n        setIsOpenC(false);\r\n    };\r\n    const hideModalD = () => {\r\n        setIsOpenD(false);\r\n    };\r\n    const hideModalE = () => {\r\n        setIsOpenE(false);\r\n    };\r\n    const hideModalF = () => {\r\n        setIsOpenF(false);\r\n    };\r\n\r\n\r\n    const handleChange = (e) => {\r\n        setSlideToUpdate(e);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleChangeSection = (e) => {\r\n        setSectionToUpdate(e);\r\n        setOpenSection(true);\r\n    }\r\n\r\n    const deleteSlide =(id) => {\r\n        dispatch(deleteParam(id));\r\n        \r\n    }\r\n\r\n    const deleteQuote =(id) => {\r\n        dispatch(deleteSection(id));\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        !isEmpty(usersData[0]) && setIsLoading(false);\r\n    }, [usersData]);\r\n    return (\r\n        <div>\r\n            <nav style={{ backgroundColor: 'green' , position: 'fixed', zIndex:'100'}}>\r\n            <NavLink exact to=\"/gestion\">\r\n                <h3 style={{ color: 'white', fontFamily: 'fantasy', marginLeft: '20px', paddingTop: '20px' }}>AtypikHouse@Dashboard</h3>\r\n            </NavLink> \r\n            <h6 style={{textAlign:'right', fontWeight:'bolder', color:'black'}}>What's up, {userData.pseudo}!</h6>\r\n            </nav>\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                    <LeftNavAdmin />\r\n                </div>\r\n                <div className=\"col-9\" style={{paddingTop: '100px'}}>\r\n                <>\r\n                    <br/>\r\n                        <h1>Paramétrage de la page d'accueil</h1>\r\n                        <GlobalStyle />\r\n                         <div className=\"row\">\r\n                            <div className=\"col-4\">\r\n                            <span style={{fontSize:'12px'}}>Ajouter des slides </span>\r\n                            <i onClick={showModal} className=\"fas fa-plus\" style={{cursor: 'pointer'}}></i>\r\n                            <Modal show={isOpen} onHide={hideModal}>\r\n                                    <Modal.Header>\r\n                                        <Modal.Title>Ajouter un slide</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <ParamForm/>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer>\r\n                                        <button onClick={hideModal}>Fermer</button>\r\n                                    </Modal.Footer>\r\n                            </Modal>\r\n                            </div>\r\n\r\n                            <div className=\"col-4\">\r\n                            <span style={{fontSize:'12px'}}>Modifier des slides </span>\r\n                            <i onClick={showModalB} className=\"fas fa-edit\" style={{cursor: 'pointer'}}></i>\r\n                            <Modal show={isOpenB} onHide={hideModalB}>\r\n                                <Modal.Header>\r\n                                    <Modal.Title>Modifier un slide</Modal.Title>\r\n                                        {open ? (\r\n                                            <button type=\"button\" class=\"close\"  onClick={(e) => setOpen(false)} aria-label=\"Close\">\r\n                                                <span aria-hidden=\"true\">&times;</span>\r\n                                            </button>\r\n                                        ) : (\r\n                                            null\r\n                                        )}\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    {(!open) &&\r\n                                    <select  name=\"slideToUpdate\" id=\"slideToUpdate\" onChange={(e) => handleChange(e.target.value)} value={slideToUpdate} class=\"browser-default custom-select\" >\r\n                                        <option value=\"\">----- Selectionner le Slide -----</option>\r\n                                            {!isEmpty(paramData[0]) && \r\n                                            paramData.map((slide, key) => {\r\n                                                return (\r\n                                                    <option value={slide._id} key={key}>{slide.titre} </option>\r\n                                                    ) \r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </select>\r\n                                    }\r\n                                    {open && \r\n                                    !isEmpty(paramData[0]) && \r\n                                        paramData.map((slide, key) => {\r\n                                            if( slide._id === slideToUpdate) {\r\n                                                return <UpdateParam slid={slide}/>\r\n                                            }\r\n                                            \r\n                                        })\r\n                                    }\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <button onClick={hideModalB}>Fermer</button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"col-4\">\r\n                            <span style={{fontSize:'12px'}}>Supprimer des slides </span>\r\n                            <i onClick={showModalC} className=\"fas fa-trash\" style={{cursor: 'pointer'}}></i>\r\n                            <Modal show={isOpenC} onHide={hideModalC}>\r\n                                <Modal.Header>\r\n                                    <Modal.Title>Supprimer un slide <i className=\"fas fa-trash\"></i></Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                {!isEmpty(paramData[0]) && \r\n                                    paramData.map((slide, key) => {\r\n                                            return (\r\n                                                    <ul>\r\n                                                        <li>\r\n                                                            <MDBBtn \r\n                                                            onClick={() => {\r\n                                                                if (window.confirm(\"Voulez-vous supprimer ce slide ?\")) {\r\n                                                                deleteSlide(slide._id);\r\n                                                                }\r\n                                                            }}\r\n                                                            key={key}\r\n                                                            >{slide.titre}\r\n                                                            </MDBBtn>\r\n                                                        </li> \r\n                                                    </ul>\r\n                                                )  \r\n                                    })\r\n                                }   \r\n                                </Modal.Body> \r\n                                <Modal.Footer>\r\n                                    <button onClick={hideModalC}>Fermer</button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                            </div>\r\n                        </div>\r\n                        <Hero slides={SliderData}/>\r\n                       <br/>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-4\">\r\n                            <span style={{fontSize:'12px'}}>Ajouter des sections </span>\r\n                            <i onClick={showModalD} className=\"fas fa-plus\" style={{cursor: 'pointer'}}></i>\r\n                            <Modal show={isOpenD} onHide={hideModalD}>\r\n                                    <Modal.Header>\r\n                                        <Modal.Title>Ajouter une section</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <SectionForm/>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer>\r\n                                        <button onClick={hideModalD}>Fermer</button>\r\n                                    </Modal.Footer>\r\n                            </Modal>\r\n                            </div>\r\n\r\n                            <div className=\"col-4\">\r\n                            <span style={{fontSize:'12px'}}>Modifier des sections </span>\r\n                            <i onClick={showModalE} className=\"fas fa-edit\" style={{cursor: 'pointer'}}></i>\r\n                            <Modal show={isOpenE} onHide={hideModalE}>\r\n                                <Modal.Header>\r\n                                    <Modal.Title>Modifier une section</Modal.Title>\r\n                                    {openSection ? (\r\n                                        <button type=\"button\" class=\"close\"  onClick={(e) => setOpenSection(false)} aria-label=\"Close\">\r\n                                            <span aria-hidden=\"true\">&times;</span>\r\n                                        </button>\r\n                                    ) : (\r\n                                        null\r\n                                    )}\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                {(!openSection) &&\r\n                                <select  name=\"slideToUpdate\" id=\"slideToUpdate\" onChange={(e) => handleChangeSection(e.target.value)} value={sectionToUpdate} class=\"browser-default custom-select\" >\r\n                                    <option value=\"\">----- Selectionner la section -----</option>\r\n                                        {!isEmpty(sectionData[0]) && \r\n                                        sectionData.map((section, key) => {\r\n                                            return (\r\n                                                <option value={section._id} key={key}>{section.titre}</option>\r\n                                                ) \r\n                                            }\r\n                                        )\r\n                                    }\r\n                                </select>\r\n                                }\r\n                                {openSection && \r\n                                    !isEmpty(sectionData[0]) && \r\n                                        sectionData.map((section, key) => {\r\n                                            if( section._id === sectionToUpdate) {\r\n                                                return <UpdateSection sect={section}/>\r\n                                            }\r\n                                            \r\n                                        })\r\n                                    }      \r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <button onClick={hideModalE}>Fermer</button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"col-4\">\r\n                            <span style={{fontSize:'12px'}}>Supprimer des sections </span>\r\n                            <i onClick={showModalF} className=\"fas fa-trash\" style={{cursor: 'pointer'}}></i>\r\n                            <Modal show={isOpenF} onHide={hideModalF}>\r\n                                <Modal.Header>\r\n                                    <Modal.Title>Supprimer une section <i className=\"fas fa-trash\"></i></Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                {!isEmpty(sectionData[0]) && \r\n                                    sectionData.map((section, key) => {\r\n                                        return (\r\n                                                <ul>\r\n                                                    <li>\r\n                                                        <MDBBtn \r\n                                                        onClick={() => {\r\n                                                            if (window.confirm(\"Voulez-vous supprimer cette section ?\")) {\r\n                                                                deleteQuote(section._id);\r\n                                                            }\r\n                                                        }}\r\n                                                        key={key}\r\n                                                        >{section.titre}\r\n                                                        </MDBBtn>\r\n                                                    </li> \r\n                                                </ul>\r\n                                            )  \r\n                                    })\r\n                                }  \r\n                                </Modal.Body> \r\n                                <Modal.Footer>\r\n                                    <button onClick={hideModalF}>Fermer</button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                            </div>\r\n                        </div>\r\n                        <InfoSection {...InfoData}/>\r\n                       \r\n                    </>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Gestion;","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Profil_admin.js",["435"],"import React, { useContext, useState } from \"react\";\r\nimport Index_admin from \"../components/Log/Index_admin\";\r\nimport { UidContext } from \"../components/UserIdConnect\";\r\nimport UpdateInfoProfil from \"../components/Profil/UpdateInfoProfil\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"../style/index.css\"\r\nimport NavBar from '../components/PageAccueil/NavBar';\r\nimport Dropdown from '../components/PageAccueil/Dropdown';\r\nimport LeftNav from \"../components/LeftNav\";\r\n\r\nconst Profil_admin = () => {\r\n  const uid = useContext(UidContext);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <NavBar toggle={toggle}/>\r\n    <Dropdown isOpen={isOpen} toggle={toggle}/>\r\n    <div className=\"container\" style={{paddingTop: '60px'}}>\r\n    <div className=\"row\">\r\n          <div className=\"col-2\">\r\n            <LeftNav />\r\n          </div>\r\n          <div className=\"col-10\">\r\n      <div >\r\n        {uid ? (\r\n          <UpdateInfoProfil />\r\n        ) : (\r\n          <>\r\n            <div className=\"row\" >\r\n              <div className=\"col-sm\">\r\n                <Index_admin signin={true} signup={false} />\r\n              </div>\r\n              <div className=\"col-sm\">\r\n                <img width=\"100%\" height=\"100%\" src=\"./img/imag_3.svg\" alt=\"imag_1\"/>\r\n              </div>\r\n            </div>\r\n            \r\n          </>\r\n          )}\r\n        </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profil_admin;\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\LeftNavAdmin.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Gestion_pro.js",["436","437","438"],"import React, { useEffect, useState } from \"react\";\r\nimport LeftNavAdmin from \"../../components/LeftNavAdmin\";\r\nimport { MDBTable, MDBTableBody, MDBTableFoot, MDBTableHead } from 'mdbreact';\r\nimport { dateParser, isEmpty } from \"../../components/Utilitaires\";\r\nimport { useSelector} from \"react-redux\";\r\nimport { deleteUser } from \"../../actions/userAction\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Gestion_pro = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const usersData = useSelector((state) => state.usersReducer);\r\n    const userData = useSelector((state) => state.userReducer);\r\n    const posts = useSelector((state) => state.postReducer);\r\n    const dispatch = useDispatch();\r\n    const deleteQuote = id => dispatch(deleteUser(id));\r\n    \r\n\r\n    useEffect(() => {\r\n        !isEmpty(usersData[0]) && setIsLoading(false);\r\n      }, [usersData]);\r\n\r\n\r\n\r\n    return (\r\n        <div >\r\n            <nav style={{ backgroundColor: 'green',  position: 'fixed', zIndex:'100' }}>\r\n            <NavLink exact to=\"/gestion\">\r\n                <h3 style={{ color: 'white', fontFamily: 'fantasy', marginLeft: '20px', paddingTop: '20px' }}>AtypikHouse@Dashboard</h3>\r\n            </NavLink>\r\n            <h6 style={{textAlign:'right', fontWeight:'bolder', color:'black'}}>What's up, {userData.pseudo}!</h6>\r\n            </nav>\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                    <LeftNavAdmin />\r\n                </div>\r\n                <div className=\"col-9\" style={{paddingTop: '100px'}}>\r\n                    <br />\r\n                    <h1>Gestion des propriétaires</h1>\r\n                    <>\r\n                    {isLoading ? (\r\n                        <i className=\"fas fa-spinner fa-spin\"></i>\r\n                    ) : (\r\n                    <MDBTable>\r\n                        <MDBTableHead color=\"primary-color\">\r\n                            <tr>\r\n                                <th>Image</th>\r\n                                <th>Pseudo</th>\r\n                                <th>Email</th>\r\n                                <th>Membre depuis</th>\r\n                                <th>Nombre de Post</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </MDBTableHead>\r\n                        <MDBTableBody>\r\n                            {!isEmpty(usersData[0]) &&\r\n                                usersData.map((user) => {\r\n                                    if ( user.role === \"propriétaire\") {\r\n                                    return (\r\n                                        <tr>\r\n                                            <td><img height=\"40\" width=\"40\" style={{ borderRadius: \"50%\" }}\r\n                                                src={user.picture}\r\n                                                alt=\"poster-pic\"\r\n                                            /></td>\r\n                                            <td>{user.pseudo}</td>\r\n                                            <td>{user.email}</td>\r\n                                            <td>{dateParser(user.createdAt)}</td>\r\n                                            <td>    \r\n                                                {!isEmpty(posts[0]) &&\r\n                                                    posts.map((post) => {\r\n                                                        if ( post.posterId === user._id) {\r\n                                                           return \r\n                                                        }\r\n                                                    })\r\n                                                }\r\n                                            </td>\r\n                                            <td>\r\n                                                <button type=\"submit\" className=\"btn btn-danger\" \r\n                                                    onClick={() => {\r\n                                                        if (window.confirm(\"Voulez-vous supprimer cet utilisateur ?\")) {\r\n                                                            deleteQuote(user._id);\r\n                                                            window.location.reload(false);\r\n                                                            \r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    <i class=\"fas fa-trash-alt\"></i>\r\n                                                </button>\r\n                                                {\" \"}\r\n                                                <button type=\"submit\" className=\"btn btn-info\">\r\n                                                    <i className=\"fas fa-user-edit\"></i>\r\n                                                </button>\r\n                                                {\" \"}\r\n                                                <button type=\"submit\" className=\"btn btn-warning\" >\r\n                                                    <NavLink  style={{ color: 'black' }} to={{\r\n                                                        pathname:'/user_view',\r\n                                                        search:`id=${user._id}` \r\n                                                    }} exact >\r\n                                                        <i className=\"fas fa-eye\"></i>\r\n                                                    </NavLink>\r\n                                                </button>\r\n                                                \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) }\r\n                                })}\r\n\r\n                        </MDBTableBody>\r\n                    </MDBTable>\r\n                    )}\r\n                    </>\r\n                    <MDBTableFoot>Created by \"@Merith\"</MDBTableFoot>\r\n\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Gestion_pro;","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Parametres.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Gestion_clients.js",["439"],"import React, { useEffect, useState } from \"react\";\r\nimport LeftNavAdmin from \"../../components/LeftNavAdmin\";\r\nimport { MDBTable, MDBTableBody, MDBTableFoot, MDBTableHead } from 'mdbreact';\r\nimport { dateParser, isEmpty } from \"../../components/Utilitaires\";\r\nimport { useSelector} from \"react-redux\";\r\nimport { deleteUser } from \"../../actions/userAction\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Gestion_clients = (props) => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const usersData = useSelector((state) => state.usersReducer);\r\n    const userData = useSelector((state) => state.userReducer);\r\n    const dispatch = useDispatch();\r\n    const deleteQuote = id => dispatch(deleteUser(id));\r\n    \r\n\r\n    useEffect(() => {\r\n        !isEmpty(usersData[0]) && setIsLoading(false);\r\n      }, [usersData]);\r\n\r\n\r\n\r\n    return (\r\n        <div >\r\n            <nav style={{ backgroundColor: 'green',  position: 'fixed', zIndex:'100' }} width='100%'>\r\n            <NavLink exact to=\"/gestion\">\r\n                <h3 style={{ color: 'white', fontFamily: 'fantasy', marginLeft: '20px', paddingTop: '20px' }}>AtypikHouse@Dashboard</h3>\r\n            </NavLink>\r\n            <h6 style={{textAlign:'right', fontWeight:'bolder', color:'black'}}>What's up, {userData.pseudo}!</h6>\r\n            </nav>\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                    <LeftNavAdmin />\r\n                </div>\r\n                <div className=\"col-9\" style={{paddingTop: '100px'}}>\r\n                    <br />\r\n                    <h1>Gestion des clients</h1>\r\n                    <>\r\n                    {isLoading ? (\r\n                        <i className=\"fas fa-spinner fa-spin\"></i>\r\n                    ) : (\r\n                    <MDBTable>\r\n                        <MDBTableHead color=\"primary-color\">\r\n                            <tr>\r\n                                <th>Image</th>\r\n                                <th>Pseudo</th>\r\n                                <th>Email</th>\r\n                                <th>Membre depuis</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </MDBTableHead>\r\n                        <MDBTableBody>\r\n                            {!isEmpty(usersData[0]) &&\r\n                                usersData.map((user) => {\r\n                                    if ( user.role === \"client\") {\r\n                                      return (\r\n                                        <tr>\r\n                                            <td><img height=\"40\" width=\"40\" style={{ borderRadius: \"50%\" }}\r\n                                                src={user.picture}\r\n                                                alt=\"poster-pic\"\r\n                                            /></td>\r\n                                            <td>{user.pseudo}</td>\r\n                                            <td>{user.email}</td>\r\n                                            <td>{dateParser(user.createdAt)}</td>\r\n                                            <td>\r\n                                                <button type=\"submit\" className=\"btn btn-danger\" \r\n                                                    onClick={() => {\r\n                                                        if (window.confirm(\"Voulez-vous supprimer cet utilisateur ?\")) {\r\n                                                            deleteQuote(user._id);\r\n                                                            window.location.reload(false);\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    <i class=\"fas fa-trash-alt\"></i>\r\n                                                </button>\r\n                                                {\" \"}\r\n                                                <button type=\"submit\" className=\"btn btn-info\">\r\n                                                    <i className=\"fas fa-user-edit\"></i>\r\n                                                </button>\r\n                                                {\" \"}\r\n                                                <button type=\"submit\" className=\"btn btn-warning\" >\r\n                                                    <NavLink  style={{ color: 'black' }} to={{\r\n                                                        pathname:'/user_view',\r\n                                                        search:`id=${user._id}` \r\n                                                    }} exact >\r\n                                                        <i className=\"fas fa-eye\"></i>\r\n                                                    </NavLink>\r\n                                                </button>\r\n                                                \r\n                                            </td>\r\n                                        </tr>\r\n                                    )  \r\n                                    }\r\n                                    \r\n                                })}\r\n\r\n                        </MDBTableBody>\r\n                    </MDBTable>\r\n                    )}\r\n                    </>\r\n                    <MDBTableFoot>Created by \"@Merith\"</MDBTableFoot>\r\n\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Gestion_clients;","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\User_view.js",["440"],"import React from \"react\";\r\n\r\nimport { MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody } from 'mdbreact';\r\nimport { useSelector } from \"react-redux\";\r\nimport { dateParser, isEmpty } from \"../../components/Utilitaires\";\r\n\r\n\r\n\r\nconst User_view = (props) => {\r\n    const usersData = useSelector((state) => state.usersReducer);\r\n    return (\r\n        <div >\r\n            <nav style={{ backgroundColor: 'green',  position: 'fixed', zIndex:'100' }}>\r\n                <h3 style={{ color: 'white', fontFamily: 'fantasy', marginLeft: '20px', paddingTop: '20px' }}>AtypikHouse@Dashboard</h3>\r\n            </nav>\r\n            <div className=\"container\">\r\n                <MDBContainer><bcomplexe r />\r\n                    <MDBRow>\r\n\r\n                        <MDBCol md=\"12\">\r\n                            <MDBCard>\r\n                                <MDBCardBody>\r\n                                    {!isEmpty(usersData[0]) &&\r\n                                        usersData.map((users) => {\r\n                                            if (`?id=${users._id}` === props.location.search) {\r\n                                                return (\r\n                                                    <>\r\n                                                        <h1> Profil de {users.pseudo}</h1>\r\n                                                        <h6>Compte crée le : {dateParser(users.createdAt)}</h6>\r\n                                                        <div className=\"row\">\r\n                                                        <div className=\"col-6\">\r\n                                                        <ul>\r\n                                                            <li>Pseudo: {users.pseudo}</li>\r\n                                                            <li>Email: {users.email}</li>\r\n                                                            <li>Tel: {users.tel}</li>\r\n                                                        </ul>\r\n                                                        </div>\r\n                                                        <div className=\"col-6\">\r\n                                                            <div className=\"left-part\">\r\n                                                            <h3>Photo de profil</h3>\r\n                                                            <img height=\"400\" width=\"100%\"\r\n                                                                src={users.picture} alt=\"user-pic\" />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )\r\n                                                \r\n                                            }\r\n                                        })}\r\n\r\n                                </MDBCardBody>\r\n                            </MDBCard>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User_view;","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Gestion_pubs.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadAdmin.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\CardAdmin.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Ajout_admin.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\ListAdmin.js",["441"],"import React, { useEffect, useState } from \"react\";\r\nimport LeftNavAdmin from \"../../components/LeftNavAdmin\";\r\nimport { MDBTable, MDBTableBody, MDBTableFoot, MDBTableHead } from 'mdbreact';\r\nimport { dateParser, isEmpty } from \"../../components/Utilitaires\";\r\nimport { useSelector} from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst ListAdmin = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const usersData = useSelector((state) => state.usersReducer);\r\n    const userData = useSelector((state) => state.userReducer);\r\n    \r\n\r\n    useEffect(() => {\r\n        !isEmpty(usersData[0]) && setIsLoading(false);\r\n      }, [usersData]);\r\n\r\n\r\n\r\n    return (\r\n        <div >\r\n            <nav style={{ backgroundColor: 'green',  position: 'fixed', zIndex:'100' }}>\r\n            <NavLink exact to=\"/gestion\">\r\n                <h3 style={{ color: 'white', fontFamily: 'fantasy', marginLeft: '20px', paddingTop: '20px' }}>AtypikHouse@Dashboard</h3>\r\n            </NavLink>\r\n            <h6 style={{textAlign:'right', fontWeight:'bolder', color:'black'}}>What's up, {userData.pseudo}!</h6>\r\n            </nav>\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                    <LeftNavAdmin />\r\n                </div>\r\n                <div className=\"col-9\" style={{paddingTop: '100px'}}>\r\n                    <br />\r\n                    <h1>Liste des Administrateurs\r\n                        <div style={{textAlign:'right', paddingRight:'30px'}}>\r\n                            <NavLink exact to=\"/ajout_admin\">\r\n                                <i className=\"fas fa-plus\" title=\"Ajouter\"></i>\r\n                            </NavLink>   \r\n                        </div>\r\n                    </h1>\r\n                    \r\n                    <>\r\n                    {isLoading ? (\r\n                        <i className=\"fas fa-spinner fa-spin\"></i>\r\n                    ) : (\r\n                    <MDBTable>\r\n                        <MDBTableHead color=\"primary-color\">\r\n                            <tr>\r\n                                <th>Image</th>\r\n                                <th>Pseudo</th>\r\n                                <th>Email</th>\r\n                                <th>Membre depuis</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </MDBTableHead>\r\n                        <MDBTableBody>\r\n                            {!isEmpty(usersData[0]) &&\r\n                                usersData.map((user) => {\r\n                                    if ( user.role === \"administrateur\") {\r\n                                    return (\r\n                                        <tr>\r\n                                            <td><img height=\"40\" width=\"40\" style={{ borderRadius: \"50%\" }}\r\n                                                src={user.picture}\r\n                                                alt=\"poster-pic\"\r\n                                            /></td>\r\n                                            <td>{user.pseudo}</td>\r\n                                            <td>{user.email}</td>\r\n                                            <td>{dateParser(user.createdAt)}</td>\r\n                                            <td>\r\n                                                \r\n                                                <button type=\"submit\" className=\"btn btn-warning\" >\r\n                                                    <a style={{ color: 'black' }} href={`/user_view/${user._id}`} >\r\n                                                        <i className=\"fas fa-eye\"></i>\r\n                                                    </a>\r\n                                                </button>\r\n                                                \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) }\r\n                                })}\r\n\r\n                        </MDBTableBody>\r\n                    </MDBTable>\r\n                    )}\r\n                    </>\r\n                    <MDBTableFoot>Created by \"@Merith\"</MDBTableFoot>\r\n\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ListAdmin;","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Bestof.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\bestof.reducer.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\postAction.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\userAction.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\usersAction.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Profil\\UpdateInfoProfil.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Profil\\UpdatePicture.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\UserIdConnect.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Utilitaires.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\posts.reducres.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Post_pro.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadsPro.js",["442"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getPosts } from \"../actions/postAction\";\r\nimport Card from \"./Post/Card\";\r\nimport { isEmpty } from \"./Utilitaires\";\r\n\r\nconst ThreadsPro = () => {\r\n  const [loadPost, setLoadPost] = useState(true);\r\n  const [count, setCount] = useState(5);\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.postReducer);\r\n  const userData = useSelector((state) => state.userReducer);\r\n\r\n  const loadMore = () => {\r\n    if (window.innerHeight + document.documentElement.scrollTop + 1 > document.scrollingElement.scrollHeight) {\r\n      setLoadPost(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (loadPost) {\r\n      dispatch(getPosts(count));\r\n      setLoadPost(false);\r\n      setCount(count + 5);\r\n    }\r\n\r\n    window.addEventListener('scroll', loadMore);\r\n    return () => window.removeEventListener('scroll', loadMore);\r\n  }, [loadPost, dispatch, count]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <ul>\r\n        {!isEmpty(posts[0]) &&\r\n          posts.map((post) => {\r\n              if ((post.posterId === userData._id) && (post.status !== \"validation\")) {\r\n                return <Card post={post} key={post._id} />;\r\n              }\r\n          })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThreadsPro;\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Mes_reservations.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadClient.js",["443"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getPosts } from \"../actions/postAction\";\r\nimport Card from \"./Post/Card\";\r\nimport { isEmpty } from \"./Utilitaires\";\r\n\r\nconst ThreadClient = () => {\r\n  const [loadPost, setLoadPost] = useState(true);\r\n  const [count, setCount] = useState(5);\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.postReducer);\r\n  const userData = useSelector((state) => state.userReducer);\r\n\r\n  const loadMore = () => {\r\n    if (window.innerHeight + document.documentElement.scrollTop + 1 > document.scrollingElement.scrollHeight) {\r\n      setLoadPost(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (loadPost) {\r\n      dispatch(getPosts(count));\r\n      setLoadPost(false);\r\n      setCount(count + 5);\r\n    }\r\n\r\n    window.addEventListener('scroll', loadMore);\r\n    return () => window.removeEventListener('scroll', loadMore);\r\n  }, [loadPost, dispatch, count]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <ul>\r\n        {!isEmpty(posts[0]) &&\r\n          posts.map((post) => {\r\n              if ((post.clientId === userData._id) && (post.status !== \"refusé\") && (post.status !== \"non_reservé\")) {\r\n                return <Card post={post} key={post._id} />;\r\n              } \r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThreadClient;\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\page_accueil\\Accueil.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\page_accueil\\globalStyles.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\InfoData.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\SliderData.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\Hero.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\Dropdown.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\InfoSection.js",["444"],"import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components'\r\nimport { Button } from './Button';\r\n\r\nconst InfoSection = () => {\r\n    const sectionData = useSelector(state => state.sectionReducer);\r\n   \r\n    const Section = styled.section`\r\n    width: 100%;\r\n    height: 100%;\r\n    `;\r\n\r\n    const Container = styled.div`\r\n    padding: 3rem calc((100vw - 1300px) /2);\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-template-rows: 800px\r\n\r\n    @media screen and (max-width: 768px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n    `;\r\n\r\n    const ColunmLeft = styled.div`\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    line-height: 1.4;\r\n    padding: 1rem 2rem;\r\n    order: ${({ reverse}) => (reverse ? '1' : '2')};\r\n\r\n    h1 {\r\n        margin-bottom: 1rem;\r\n        font-size: clamp(1.5rem, 6vw, 2rem);\r\n    }\r\n\r\n    p {\r\n        margin-bottom: 2rem;\r\n    }\r\n    `;\r\n\r\n    const ColumnRight = styled.div`\r\n    padding: 1rem 2rem;\r\n    order: ${({ reverse }) => (reverse ? '1' : '2' )};\r\n\r\n    display:flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    @media screen and (max-width: 768px) {\r\n        order: ${({ reverse}) => (reverse ? '2' : '1')};\r\n    }\r\n\r\n    img {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n\r\n        @media screen and (max-width: 768px) {\r\n            width: 90%;\r\n            height: 90%;\r\n        }\r\n    }\r\n    `;\r\n\r\n    if(!Array.isArray(sectionData) || sectionData.length <= 0) {\r\n        return null;\r\n    }\r\n   \r\n    return (\r\n       <Section>\r\n        {sectionData.map((section, index) => {\r\n            if(section.reverse === true) {\r\n                 return (\r\n                    <Container>\r\n                        <ColunmLeft>\r\n                            <h1 key={index}>{section.titre}</h1>\r\n                            <p key={index}>{section.paragraph}</p>\r\n                            \r\n                        </ColunmLeft>\r\n                        <ColumnRight reverse>\r\n                            <img src={section.picture} alt='home' key={index}/>\r\n                        </ColumnRight>\r\n                    </Container> \r\n                )\r\n            } else if (section.reverse === false) {\r\n                return (\r\n                    <Container>\r\n                        <ColunmLeft>\r\n                            <h1 key={index}>{section.titre}</h1>\r\n                            <p key={index}>{section.paragraph}</p>\r\n                            \r\n                            <Button to=\"/home\" >Accueil</Button>\r\n                        </ColunmLeft>\r\n                        <ColumnRight >\r\n                            <img src={section.picture} alt='home' key={index}/>\r\n                        </ColumnRight>\r\n                    </Container> \r\n                )\r\n            }\r\n               \r\n        })}\r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default InfoSection\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\NavBar.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\Button.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\MenuData.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\NavBarPro.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\HomePro.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\DropdownPro.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\GoogleMap\\Map.js",["445","446"],"import React from 'react';\r\nimport '../../style/Map.css';\r\nimport {\r\n    InfoWindow,\r\n    withScriptjs,\r\n    withGoogleMap,\r\n    GoogleMap,\r\n    Marker,\r\n  } from \"react-google-maps\";\r\nimport Geocode from 'react-geocode';\r\nimport { GoogleData } from '../../data/GoogleData';\r\nGeocode.setApiKey(\"AIzaSyAtAsOVenmjEzpg_JiXjMglbFjEt3rPLr0\")\r\n\r\nconst Map = ({ post}) =>  {\r\n\r\n    let valLng;\r\n    let valLat;\r\n    let place;\r\n    let zoom;\r\n\r\n    {GoogleData.map((item, key) => {\r\n        if(item.name === post.departement) {\r\n            if(post.lng && post.lat) {\r\n                return (\r\n                    <div key={key}>\r\n                        {valLat=post.lat} \r\n                        {valLng=post.lng}\r\n                        {place=post.titre}\r\n                        {zoom=16}\r\n                    </div>\r\n                )\r\n            } else {\r\n                 return (\r\n                <div key={key}>\r\n                    {valLat=item.lat} \r\n                    {valLng=item.lng}\r\n                    {place=post.departement}\r\n                    {zoom=6}\r\n                </div>\r\n                )\r\n            }\r\n        }\r\n        \r\n    })}\r\n\r\n    const MapWithAMarker = withScriptjs(withGoogleMap(props =>\r\n        <GoogleMap\r\n        defaultZoom={zoom}\r\n        defaultCenter={{ lat: valLat, lng: valLng }}\r\n        >\r\n        <Marker\r\n            position={{ lat: valLat, lng: valLng }}\r\n        >\r\n            <InfoWindow>\r\n                <div>{place}</div>\r\n            </InfoWindow>\r\n        </Marker>\r\n        </GoogleMap>\r\n    ));\r\n\r\n    \r\n\r\n    return (\r\n    <>\r\n        \r\n        <h5>Google Map</h5>\r\n        <MapWithAMarker\r\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAtAsOVenmjEzpg_JiXjMglbFjEt3rPLr0&v=3.exp&libraries=geometry,drawing,places\"\r\n            loadingElement={<div style={{ height: `100%` }} />}\r\n            containerElement={<div style={{ height: `400px` }} />}\r\n            mapElement={<div style={{ height: `100%` }} />}\r\n        />\r\n        {(post.lng && post.lat) &&\r\n            <div>\r\n                <br/>\r\n                Latitude : {valLat} <br/><br/>\r\n                Longitude : {valLng}\r\n            </div>\r\n        }\r\n\r\n        \r\n        \r\n        \r\n    </>\r\n);\r\n\r\n\r\n       \r\n};\r\n\r\nexport default Map;\r\n\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\GoogleData.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\Prisedevue.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\pages\\pages_admin\\Pub_attente.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\ThreadVal.js",["447"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getPosts } from \"../actions/postAction\";\r\nimport CardAdmin from \"./Post/CardAdmin\";\r\nimport { isEmpty } from \"./Utilitaires\";\r\n\r\nconst ThreadVal = () => {\r\n  const [loadPost, setLoadPost] = useState(true);\r\n  const [count, setCount] = useState(5);\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.postReducer);\r\n\r\n  const loadMore = () => {\r\n    if (window.innerHeight + document.documentElement.scrollTop + 1 > document.scrollingElement.scrollHeight) {\r\n      setLoadPost(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (loadPost) {\r\n      dispatch(getPosts(count));\r\n      setLoadPost(false);\r\n      setCount(count + 5);\r\n    }\r\n\r\n    window.addEventListener('scroll', loadMore);\r\n    return () => window.removeEventListener('scroll', loadMore);\r\n  }, [loadPost, dispatch, count]);\r\n\r\n  return (\r\n    <div className=\"thread-container\">\r\n      <ul>\r\n        {!isEmpty(posts[0]) &&\r\n          posts.map((post) => {\r\n            if (post.status === \"validation\") {\r\n                return <CardAdmin post={post} key={post._id} />;\r\n            }\r\n          })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThreadVal;\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\CardPrises.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\ReservationForm.js",["448","449","450","451","452","453","454","455","456"],"import React, { useEffect, useState } from \"react\";\r\nimport { isEmpty, shortDateParser } from \"../../components/Utilitaires\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport StripeCheckout from \"react-stripe-checkout\"\r\nimport ImageGallery from 'react-image-gallery';\r\nimport { MDBBtn, MDBInput } from 'mdbreact';\r\nimport { addReservation, deleteReserve, editReservation, getPosts, sendEmail, sendJustificatif, updateStatus } from \"../../actions/postAction\";\r\nimport Map from \"../GoogleMap/Map\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport MsgData from '../../data/MsgData';\r\nimport LeftNav from \"../LeftNav\";\r\n\r\n \r\nconst ReservationForm = ({ post }) => {\r\n  const usersData = useSelector((state) => state.usersReducer);\r\n  const userData = useSelector((state) => state.userReducer);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const dispatch = useDispatch();\r\n  const status = \"attente\"\r\n  const [date_open, setDate_open] = useState(\"\");\r\n  const [date_close, setDate_close] = useState(\"\");\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [paiement, setPaiement] = useState(\"\");\r\n\r\n\r\n  const notifySuccess = () => {\r\n    toast.success('Réservation réusiite!', {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      });\r\n  }\r\n\r\n  const confirmReservation = () => {\r\n    dispatch(updateStatus(post._id, post.message, status, userData._id));\r\n    {!isEmpty(usersData[0]) &&\r\n      usersData.map((user) => {\r\n      if (post.posterId === user._id) {\r\n        dispatch(sendEmail(user.email, user.pseudo, MsgData[1].subject, MsgData[1].text))\r\n      }})\r\n    }\r\n    \r\n  }\r\n\r\n  const double = (e) => {\r\n    e.preventDefault();\r\n    notifySuccess();\r\n    confirmReservation();\r\n    window.location.reload(false);\r\n    \r\n  }\r\n\r\n  \r\n  useEffect(() => {\r\n    !isEmpty(usersData[0]) && setIsLoading(false);\r\n  }, [usersData]);\r\n\r\n  const images = [\r\n    {\r\n      original: `${post.picture[0]}`,\r\n      thumbnail: `${post.picture[0]}`,\r\n    },\r\n    {\r\n      original: `${post.picture[1]}`,\r\n      thumbnail: `${post.picture[1]}`,\r\n    },\r\n    {\r\n      original: `${post.picture[2]}`,\r\n      thumbnail: `${post.picture[2]}`,\r\n    },\r\n    {\r\n      original: `${post.picture[3]}`,\r\n      thumbnail: `${post.picture[3]}`,\r\n    },\r\n    {\r\n      original: `${post.picture[4]}`,\r\n      thumbnail: `${post.picture[4]}`,\r\n    },\r\n   \r\n  ];\r\n\r\n  const makePayment = token => {\r\n    const body = {\r\n      token,\r\n      post\r\n    }\r\n\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n\r\n    return fetch(`${process.env.REACT_APP_API_URL}api/user/payment`, {\r\n      method: \"POST\",\r\n      headers,\r\n      body: JSON.stringify(body)\r\n    }\r\n    ).then(response => {\r\n      const { status } = response;\r\n      post.reservations.map((reservation) => {\r\n        if(reservation.reservationId === userData._id) {      \r\n           dispatch(editReservation(post._id, reservation._id, post.prix));\r\n           dispatch(sendJustificatif(userData.email, userData.pseudo, post.prix, post.titre))\r\n        }\r\n      })\r\n      \r\n    })\r\n      .catch(error => console.log(error));\r\n  }\r\n\r\n\r\n\r\n  const notify = () => {\r\n    toast.warn('Demande déjà été prise en compte, en attente de validation', {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      });\r\n  }\r\n\r\n  \r\n  const notifyNoDate = () => {\r\n    toast.info('Veuillez saisir les dates de reservation', {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      });\r\n  }\r\n\r\n  const notifyReservation = () => {\r\n    toast.success('Dates de reservation enregistré avec succès!', {\r\n      position: \"top-right\",\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      });\r\n  }\r\n\r\n  const notPaye = () => {\r\n    toast.error('Veuillez confirmer la reservation avant d\\'effectuer le paiement!', {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      });\r\n  }\r\n\r\n\r\n  const handleDate = (e) => {\r\n    e.preventDefault();\r\n    if ((date_open !== \"\") && (date_close !== \"\")) {\r\n      if ((date_open >= post.date_open) && (date_close <= post.date_close)) {\r\n          if (date_open > date_close) {\r\n          alert(\"Vos dates sont incorrectes \")\r\n          } \r\n          else if ( date_open === date_close ) {\r\n            alert(\"Vos dates sont incorrectes \") \r\n          }\r\n          else {\r\n            dispatch(addReservation(post._id, userData._id, userData.pseudo, paiement, date_open, date_close))\r\n            .then(() => dispatch(getPosts()))\r\n            .then(() => setDate_open(''))\r\n            .then(() => setDate_close(''));\r\n            setShowForm(true);\r\n            notifyReservation();\r\n          }\r\n        \r\n      } else {\r\n          alert(\"Veuillez entrer des dates valides \")\r\n      }\r\n    } \r\n    else {\r\n      alert(\"Veuillez entrer deux dates \")\r\n    }\r\n    \r\n  }\r\n \r\n\r\n  const deleteDate = (e) => {\r\n    e.preventDefault();\r\n    post.reservations.map((reservation) => {\r\n      if(reservation.reservationId === userData._id) {\r\n            dispatch(deleteReserve(post._id, reservation._id));\r\n            setShowForm(false);\r\n            dispatch(updateStatus(post._id, post.message, \"non_reservé\", userData._id));\r\n\r\n\r\n      }\r\n    })\r\n    window.location.reload(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"row\">\r\n        <div className=\"col-1\" style={{ float: 'right'}}>\r\n          <LeftNav />\r\n        </div>\r\n        <div className=\"col-11\">\r\n\r\n    <div style={{ textAlign:'left'}}>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                      <h3>{post.titre}</h3>\r\n                      <h4>{post.prix} € la nuité</h4>\r\n                  <ul>\r\n                      {post.video && (\r\n                      <iframe\r\n                          width=\"100%\"\r\n                          height=\"400\"\r\n                          src={post.video}\r\n                          frameBorder=\"0\"\r\n                          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                          allowFullScreen\r\n                          title={post._id}\r\n                      ></iframe>\r\n                      )}\r\n                      <br/>\r\n                      <ImageGallery items={images} />\r\n                      \r\n                      <span>Type : {post.type} <br/> Département : {post.departement} <br/> Pour {post.nbr_personne} personne{post.nbr_personne > 1 ? \"s\" : \"\"}</span>\r\n                      <h5>{post.price}</h5>\r\n                      <span style={{fontSize:\"12px\"}}>Disponible du {shortDateParser(post.date_open)} au {shortDateParser(post.date_close)}</span>\r\n                      \r\n                      <hr/>\r\n                      <h4 style={{fontWeight: 'bolder'}}>Dates de réservation</h4>\r\n                        \r\n                      {isEmpty(post.reservations[0]) &&  \r\n                      <form action=\"\" onSubmit={handleDate}>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-4\">\r\n                            <MDBInput\r\n                              label=\"A partir\"\r\n                              type=\"date\"\r\n                              name=\"date_open\"\r\n                              id=\"date_open\"\r\n                              onChange={(e) => setDate_open(e.target.value)}\r\n                              value={date_open}  \r\n                            />\r\n                          </div>\r\n                          <div className=\"col-4\">\r\n                            <MDBInput\r\n                              label=\"Jusqu'au\"\r\n                              type=\"date\"\r\n                              name=\"date_close\"\r\n                              id=\"date_close\"\r\n                              onChange={(e) => setDate_close(e.target.value)}\r\n                              value={date_close}  \r\n                            />\r\n                          </div>\r\n                          <div className=\"col-4\">\r\n                            <MDBBtn type=\"submit\">\r\n                              Valider\r\n                            </MDBBtn>\r\n                          </div> \r\n                        </div>\r\n                      </form>\r\n                      } \r\n                      \r\n                      {post.reservations.map((reservation) => {\r\n                            if(reservation.reservationId === userData._id) {\r\n                            return ( \r\n                              <>\r\n                                <p>Reservation du {shortDateParser(reservation.date_open)} au {shortDateParser(reservation.date_close)} <img src=\"./img/check.png\" alt=\"\"/></p>\r\n                                <MDBBtn onClick={deleteDate}>\r\n                                  Annuler\r\n                                </MDBBtn>\r\n                                <p style={{ color: '#cc3300', fontSize: '11px'}}>En cas d'annulation après paiement, la somme perçue vous sera remboursée dans un delais de 5 jours'</p>\r\n                                </>\r\n                              )}\r\n                      })}\r\n                  \r\n                                  \r\n                      \r\n                      <hr />\r\n                      <h5>Détails</h5>\r\n                      <p>{post.message}</p>\r\n                      <hr />\r\n                      <Map post={post} key={post._id} />\r\n                  </ul>\r\n                  \r\n                  <hr/>\r\n                  <h5> Les informations du propriétaire</h5>\r\n                  <div>\r\n                      {!isEmpty(usersData[0]) &&\r\n                          usersData.map((user) => {\r\n                          if (post.posterId === user._id) {\r\n                              return <div>\r\n                              <br />\r\n                                      * Pseudo\r\n                                      <h3> {user.pseudo}</h3>\r\n                                      * Email\r\n                                      <h5> {user.email}</h5>\r\n                                      * Numéro de tel\r\n                                      <h5> {user.tel}</h5>\r\n                                  </div>\r\n                          }\r\n                      })} \r\n                      \r\n                  </div>\r\n                  <br/>\r\n                  <br/>\r\n                  {(post.status === \"non_reservé\") && showForm && (\r\n                      <>\r\n                        <MDBBtn type=\"button\" onClick={double}>\r\n                          Confirmer reservation\r\n                        </MDBBtn>\r\n                        <ToastContainer\r\n                        position=\"top-right\"\r\n                        autoClose={5000}\r\n                        hideProgressBar={false}\r\n                        newestOnTop\r\n                        closeOnClick\r\n                        rtl={false}\r\n                        pauseOnFocusLoss\r\n                        draggable\r\n                        pauseOnHover\r\n                        />\r\n                      </>\r\n                    ) }\r\n                  \r\n                  {((post.status === \"non_reservé\") || (post.status === \"refusé\")) && !showForm && (      \r\n                      <>\r\n                        <MDBBtn type=\"button\" onClick={notifyNoDate}>\r\n                          Confirmer reservation\r\n                        </MDBBtn>\r\n                        <ToastContainer\r\n                          position=\"top-right\"\r\n                          autoClose={5000}\r\n                          hideProgressBar={false}\r\n                          newestOnTop={false}\r\n                          closeOnClick\r\n                          rtl={false}\r\n                          pauseOnFocusLoss\r\n                          draggable\r\n                          pauseOnHover\r\n                        />\r\n                        <ToastContainer />\r\n                      </>\r\n                  )}\r\n                  \r\n                  {post.status === \"attente\"  && (\r\n                    <>\r\n                    <MDBBtn type=\"button\" onClick={notify}>\r\n                      Confirmer reservation\r\n                    </MDBBtn>\r\n                    <ToastContainer\r\n                      position=\"top-right\"\r\n                      autoClose={5000}\r\n                      hideProgressBar={false}\r\n                      newestOnTop={false}\r\n                      closeOnClick\r\n                      rtl={false}\r\n                      pauseOnFocusLoss\r\n                      draggable\r\n                      pauseOnHover\r\n                    />\r\n                    <ToastContainer />\r\n                    \r\n                    <br/>\r\n                    {post.reservations.map((reservation) => {\r\n                            if (reservation.paiement === null) {\r\n                              return (\r\n                                <StripeCheckout\r\n                                  stripeKey=\"pk_test_51IQafJDRHvU06AUoTyjd7f3g4TuEJI2wfvRwZxHKSuHQvfZE8J5Dy9GAgeNcH5oZoK6HDa1cYUFyaLKwis59tvRd00ZAf60pn1\"\r\n                                  token={makePayment}\r\n                                  name=\"By Merith\"\r\n                                  amount={post.prix * 100}\r\n                                >\r\n                                  <button className=\"btn-large\" style={{backgroundColor: '#17233e', borderRadius: '15px'}} >Payer {post.prix} €</button>\r\n                                </StripeCheckout> \r\n                              )\r\n                                \r\n                            } else {\r\n                              return <p style={{fontWeight:'bold', color:'green'}}>Paiement effectué, un justificatif vous a été envoyé dans votre boite mail <img src=\"./img/check.png\" alt=\"\"/></p>\r\n                              \r\n                            }\r\n                        }\r\n                    )} \r\n                    </>\r\n                  )}\r\n\r\n                  {post.status === \"non_reservé\" && \r\n                    <>\r\n                      <br/>\r\n                      <button className=\"btn-large\" style={{backgroundColor: '#17233e', borderRadius: '15px'}} onClick={notPaye}>Payer {post.prix} €</button>\r\n                      <ToastContainer\r\n                        position=\"top-right\"\r\n                        autoClose={5000}\r\n                        hideProgressBar={false}\r\n                        newestOnTop\r\n                        closeOnClick\r\n                        rtl={false}\r\n                        pauseOnFocusLoss\r\n                        draggable\r\n                        pauseOnHover\r\n                      />\r\n                    </>\r\n                  }\r\n\r\n                  \r\n                  </div>\r\n              </div>\r\n            </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n  </>\r\n  );\r\n};\r\n\r\nexport default ReservationForm\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Parametre\\ParamForm.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\paramAction.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\param.reducer.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Parametre\\UpdateParam.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Parametre\\SectionForm.js",["457"],"import React, { useState } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody} from 'mdbreact';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addSection } from '../../actions/sectionAction';\r\nimport { Switch } from 'antd';\r\n\r\nconst SectionForm = () => {\r\n    const dispatch = useDispatch();\r\n    const userData = useSelector((state) => state.userReducer);\r\n    \r\n\r\n    // data slide 1\r\n    const [file, setFile] = useState(\"\");\r\n    const [titre, setTitre] = useState(\"\");\r\n    const [paragraph, setParagraph] = useState(\"\");\r\n    const [selectedImage, setSelectedImage] = useState([]);\r\n    const [reverse, setReverse] = useState(false);\r\n\r\n    const toggler = () => {\r\n      reverse ? setReverse(false) : setReverse(true);\r\n    }\r\n    \r\n    const imageHandleChange = (e) => {\r\n      setSelectedImage(URL.createObjectURL(e.target.files[0]));\r\n      setFile(e.target.files[0]);\r\n    };\r\n\r\n    const cancelSection = () => {\r\n        setTitre('');\r\n        setParagraph('');\r\n        setFile('');\r\n        setSelectedImage('');\r\n    }\r\n\r\n  \r\n\r\n  const handleSection = async () => {\r\n        const data = new FormData();\r\n        data.append('sectionId', userData._id);\r\n        data.append('titre', titre);\r\n        data.append('paragraph', paragraph);\r\n        data.append('reverse', reverse);\r\n        if (file) data.append(\"file\", file);\r\n        await dispatch(addSection(data));\r\n  };\r\n\r\n    return (\r\n        <MDBContainer>\r\n        <MDBRow>\r\n          <MDBCol md=\"12\">\r\n            <MDBCard >\r\n              <MDBCardBody>\r\n                <form action=\"\" enctype=\"multipart/form-data\" >\r\n                  <div className=\"grey-text\">\r\n                    <MDBInput\r\n                    required\r\n                      label=\"titre\"\r\n                      type=\"text\"\r\n                      name=\"titre\"\r\n                      id=\"titre\"\r\n                      onChange={(e) => setTitre(e.target.value)}\r\n                      value={titre}\r\n                    />\r\n                    <br/>\r\n                   \r\n                    <textarea \r\n                        class=\"form-control rounded-0\" \r\n                        id=\"exampleFormControlTextarea2\" \r\n                        rows=\"3\"\r\n                        name=\"paragraph\"\r\n                        id=\"paragraph\"\r\n                        placeholder=\"Texte...\"\r\n                        onChange={(e) => setParagraph(e.target.value)}\r\n                        value={paragraph}\r\n                    ></textarea>\r\n                    <br/>\r\n                    <Switch onClick={toggler} />\r\n                    { reverse ? <span> Disposition à droite</span> : <span> Disposition à gauche</span>}\r\n                    <br/>\r\n                    <label for=\"file\">Ajouter une image</label><br/>\r\n                    <input\r\n                        required\r\n                        style={{width:\"140px\"}}\r\n                        type=\"file\"\r\n                        id=\"file\"\r\n                        name=\"file\"\r\n                        accept=\".jpg, .jpeg, .png\"\r\n                        onChange={imageHandleChange}\r\n                    />  \r\n                  </div>\r\n                  <div className=\"row\">\r\n                    {(selectedImage !== \"\")  &&\r\n                      <img height=\"300px\" width=\"100%\" src={selectedImage} alt=\"\"/>\r\n                    }\r\n                  </div>\r\n                  <div className=\"footer-form\"> \r\n                      <div className=\"btn-send\">\r\n                        {(titre && paragraph && file) &&\r\n                        <>\r\n                            <MDBBtn type=\"submit\" onClick={cancelSection}>\r\n                              Annuler\r\n                            </MDBBtn>\r\n                            <MDBBtn type=\"submit\" onClick={handleSection}>\r\n                              Envoyer\r\n                            </MDBBtn>\r\n                        </>\r\n                        }\r\n                        {!(titre && paragraph && file) &&\r\n                          <div>Veuillez remplir toutes les informations!</div>\r\n                        } \r\n                      </div>\r\n                  </div>\r\n                </form>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n           \r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    )\r\n}\r\n\r\nexport default SectionForm\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Parametre\\UpdateSection.js",["458"],"import React, { useState } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBCard, MDBCardBody} from 'mdbreact';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateSection, uploadSectionPicture } from '../../actions/sectionAction';\r\n\r\nconst UpdateSection = ({ sect }) => {\r\n    const dispatch = useDispatch();\r\n    const [selectedImg, setSelectedImg] = useState([]);\r\n    const [getImage, setGetImage] = useState(false);\r\n\r\n    // data slide 1\r\n    const [file, setFile] = useState(\"\");\r\n    const [titreUpdate, setTitreUpdate] = useState(\"\");\r\n    const [paragraphUpdate, setParagraphUpdate] = useState(\"\");\r\n    \r\n\r\n    const imageChanged = (e) => {\r\n        setSelectedImg(URL.createObjectURL(e.target.files[0]));\r\n        setFile(e.target.files[0]);\r\n        setGetImage(true);\r\n    };\r\n\r\n    const handleAllDetail = () => {\r\n      handlePicSection();\r\n      updateItemSection();\r\n    }\r\n    \r\n\r\n    const handlePicSection = () => {\r\n      const data = new FormData();\r\n      data.append(\"titre\", sect.titre );\r\n      data.append(\"paragraph\", sect.paragraph);\r\n      data.append(\"sectionId\", sect._id );\r\n      data.append(\"file\", file);\r\n\r\n      dispatch(uploadSectionPicture(data, sect._id));\r\n    };\r\n\r\n    const updateItemSection = () => {\r\n          if(titreUpdate || paragraphUpdate) {\r\n            dispatch(updateSection(sect._id, titreUpdate, paragraphUpdate));\r\n          }\r\n          \r\n    }\r\n\r\n    return (\r\n        <MDBContainer>\r\n        <MDBRow>\r\n          <MDBCol md=\"12\">\r\n            <MDBCard >\r\n              <MDBCardBody>\r\n                <form action=\"\" enctype=\"multipart/form-data\" >\r\n                  <div className=\"grey-text\">\r\n                    <input\r\n                      defaultValue={sect.titre}\r\n                      label=\"titre\"\r\n                      type=\"text\"\r\n                      onChange={(e) => setTitreUpdate(e.target.value)}\r\n                      \r\n                    />\r\n                    <br/>\r\n                    <textarea \r\n                        class=\"form-control rounded-0\" \r\n                        id=\"exampleFormControlTextarea2\" \r\n                        rows=\"3\"\r\n                        name=\"paragraph\"\r\n                        id=\"paragraph\"\r\n                        placeholder=\"Texte...\"\r\n                        onChange={(e) => setParagraphUpdate(e.target.value)}\r\n                        defaultValue={sect.paragraph}\r\n                    ></textarea>  \r\n                  </div>\r\n                  <br/>\r\n                  <label for=\"file\">Changer d'image</label><br/>\r\n                  <input\r\n                    style={{width:\"140px\"}}\r\n                    type=\"file\"\r\n                    id=\"file\"\r\n                    name=\"file\"\r\n                    accept=\".jpg, .jpeg, .png\"\r\n                    onChange={imageChanged}\r\n                  />\r\n                  \r\n                  <br/>\r\n                  <br/>\r\n                  <div className=\"row\">\r\n                  { (getImage === false)  ? (\r\n                    <img height=\"300px\" width=\"100%\" src={sect.picture} alt=\"\"/>\r\n                  ) : (\r\n                    <img height=\"300px\" width=\"100%\" src={selectedImg} alt=\"\"/>\r\n                  )}    \r\n                  </div>\r\n                  <br/>\r\n                  <div className=\"footer-form\"> \r\n                      <div className=\"btn-send\">\r\n                        <MDBBtn type=\"submit\" onClick={handleAllDetail}>\r\n                          Valider\r\n                        </MDBBtn>\r\n                      </div>\r\n                  </div>\r\n                  \r\n                </form>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n           \r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    )\r\n}\r\n\r\nexport default UpdateSection\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\reducers\\section.reducer.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\actions\\sectionAction.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Modal\\Modal.js",["459"],"import React, { useRef, useCallback, useEffect} from 'react';\r\nimport { useSpring, animated} from 'react-spring';\r\nimport styled from 'styled-components'\r\nimport { MdClose } from 'react-icons/md'\r\n\r\nconst Background =  styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.8);\r\n    position: fixed;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 100;\r\n    \r\n`\r\n\r\nconst ModalWrapper= styled.div`\r\nwidth: 800px;\r\nheight: 500px;\r\nbox-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\r\nbackground: #fff;\r\ncolor:#000;\r\ndisplay: grid;\r\ngrid-template-columns: 1fr 1fr\r\nposition: relative;\r\nz-index: 100;\r\nborder-radius: 10px;\r\n`;\r\nconst ModalImg= styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 10px 0 0 10px;\r\n    background: #000;\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    line-height: 1.8;\r\n    color: #141414;\r\n\r\n    p {\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    button {\r\n        padding: 10px 24px;\r\n        background: #141414;\r\n        color: #fff;\r\n        border: none;\r\n    }\r\n`;\r\n\r\nconst CloseModalButton = styled(MdClose)`\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 20px;\r\n    right: 20px;\r\n    width: 32px;\r\n    height: 32px;\r\n    padding: 0;\r\n    z-index: 10;\r\n`;\r\n\r\nconst Modal = ({showModal, setShowModal}) => {\r\n\r\n    const modalRef = useRef()\r\n\r\n\r\n    const animation = useSpring({\r\n        config: {\r\n            duration: 250\r\n        },\r\n        opacity: showModal ? 1 : 0,\r\n        transform: showModal ? `translateY(0%)` : `translate(-100%)`\r\n    });\r\n\r\n    const closeModal = e => {\r\n        if(modalRef.current === e.target) {\r\n            setShowModal(false)\r\n        }\r\n    };\r\n\r\n    const keyPress = useCallback(e => {\r\n        if(e.key === 'Escape' && showModal) {\r\n            setShowModal(false)\r\n        }\r\n    }, [setShowModal, showModal])\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', keyPress)\r\n        return () => {\r\n            document.removeEventListener('keydown', keyPress)\r\n        }\r\n    }, [keyPress])\r\n\r\n    return (\r\n        <> \r\n            {showModal ? (\r\n                <Background ref={modalRef} onClick={closeModal}>\r\n                    <animated.div style={animation}>\r\n                    <ModalWrapper showModal={showModal}>\r\n\r\n                    </ModalWrapper>\r\n                    <ModalContent>\r\n                        \r\n                        <p>Yes we are</p>\r\n                        <button>CLICK ME</button>\r\n                        <button>CLICK ME</button>\r\n                    </ModalContent>\r\n                    </animated.div>\r\n                    <CloseModalButton aria-label='Close-modal' onClick={() => setShowModal(prev => !prev)} />\r\n                </Background>\r\n            ) : (\r\n                null\r\n            )}\r\n        </>\r\n        )\r\n}\r\n\r\nexport default Modal;\r\n","C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\PageAccueil\\Footer.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\components\\Post\\CardaddPic.js",[],"C:\\Users\\user\\Desktop\\atypikhouse\\client\\src\\data\\MsgData.js",[],{"ruleId":"460","replacedBy":"461"},{"ruleId":"462","replacedBy":"463"},{"ruleId":"464","severity":1,"message":"465","line":9,"column":16,"nodeType":"466","messageId":"467","endLine":9,"endColumn":23},{"ruleId":"460","replacedBy":"468"},{"ruleId":"462","replacedBy":"469"},{"ruleId":"470","severity":1,"message":"471","line":34,"column":28,"nodeType":"472","messageId":"473","endLine":34,"endColumn":30},{"ruleId":"474","severity":1,"message":"475","line":65,"column":5,"nodeType":"476","messageId":"477","endLine":70,"endColumn":6},{"ruleId":"470","severity":1,"message":"478","line":66,"column":28,"nodeType":"472","messageId":"479","endLine":66,"endColumn":30},{"ruleId":"474","severity":1,"message":"475","line":75,"column":5,"nodeType":"476","messageId":"477","endLine":80,"endColumn":6},{"ruleId":"470","severity":1,"message":"478","line":76,"column":28,"nodeType":"472","messageId":"479","endLine":76,"endColumn":30},{"ruleId":"470","severity":1,"message":"478","line":81,"column":41,"nodeType":"472","messageId":"479","endLine":81,"endColumn":43},{"ruleId":"474","severity":1,"message":"475","line":93,"column":5,"nodeType":"476","messageId":"477","endLine":98,"endColumn":6},{"ruleId":"470","severity":1,"message":"478","line":94,"column":28,"nodeType":"472","messageId":"479","endLine":94,"endColumn":30},{"ruleId":"470","severity":1,"message":"478","line":99,"column":41,"nodeType":"472","messageId":"479","endLine":99,"endColumn":43},{"ruleId":"474","severity":1,"message":"475","line":230,"column":5,"nodeType":"476","messageId":"477","endLine":234,"endColumn":4},{"ruleId":"470","severity":1,"message":"471","line":245,"column":42,"nodeType":"472","messageId":"473","endLine":245,"endColumn":44},{"ruleId":"464","severity":1,"message":"480","line":11,"column":10,"nodeType":"466","messageId":"467","endLine":11,"endColumn":19},{"ruleId":"470","severity":1,"message":"481","line":179,"column":45,"nodeType":"472","messageId":"473","endLine":179,"endColumn":47},{"ruleId":"460","replacedBy":"482"},{"ruleId":"462","replacedBy":"483"},{"ruleId":"470","severity":1,"message":"471","line":58,"column":28,"nodeType":"472","messageId":"473","endLine":58,"endColumn":30},{"ruleId":"470","severity":1,"message":"471","line":83,"column":26,"nodeType":"472","messageId":"473","endLine":83,"endColumn":28},{"ruleId":"470","severity":1,"message":"471","line":36,"column":32,"nodeType":"472","messageId":"473","endLine":36,"endColumn":34},{"ruleId":"470","severity":1,"message":"471","line":24,"column":29,"nodeType":"472","messageId":"473","endLine":24,"endColumn":31},{"ruleId":"484","severity":1,"message":"485","line":37,"column":23,"nodeType":"486","endLine":37,"endColumn":65},{"ruleId":"460","replacedBy":"487"},{"ruleId":"462","replacedBy":"488"},{"ruleId":"464","severity":1,"message":"480","line":24,"column":12,"nodeType":"466","messageId":"467","endLine":24,"endColumn":21},{"ruleId":"470","severity":1,"message":"471","line":171,"column":68,"nodeType":"472","messageId":"473","endLine":171,"endColumn":70},{"ruleId":"470","severity":1,"message":"471","line":269,"column":72,"nodeType":"472","messageId":"473","endLine":269,"endColumn":74},{"ruleId":"484","severity":1,"message":"489","line":37,"column":17,"nodeType":"486","endLine":37,"endColumn":61},{"ruleId":"470","severity":1,"message":"471","line":57,"column":54,"nodeType":"472","messageId":"473","endLine":57,"endColumn":56},{"ruleId":"470","severity":1,"message":"471","line":70,"column":70,"nodeType":"472","messageId":"473","endLine":70,"endColumn":72},{"ruleId":"470","severity":1,"message":"478","line":72,"column":60,"nodeType":"490","messageId":"491","endLine":72,"endColumn":66},{"ruleId":"470","severity":1,"message":"471","line":55,"column":54,"nodeType":"472","messageId":"473","endLine":55,"endColumn":56},{"ruleId":"470","severity":1,"message":"471","line":24,"column":63,"nodeType":"472","messageId":"473","endLine":24,"endColumn":65},{"ruleId":"470","severity":1,"message":"471","line":58,"column":54,"nodeType":"472","messageId":"473","endLine":58,"endColumn":56},{"ruleId":"470","severity":1,"message":"471","line":35,"column":28,"nodeType":"472","messageId":"473","endLine":35,"endColumn":30},{"ruleId":"470","severity":1,"message":"471","line":35,"column":28,"nodeType":"472","messageId":"473","endLine":35,"endColumn":30},{"ruleId":"470","severity":1,"message":"471","line":74,"column":43,"nodeType":"472","messageId":"473","endLine":74,"endColumn":45},{"ruleId":"474","severity":1,"message":"475","line":21,"column":5,"nodeType":"476","messageId":"477","endLine":44,"endColumn":8},{"ruleId":"470","severity":1,"message":"471","line":21,"column":33,"nodeType":"472","messageId":"473","endLine":21,"endColumn":35},{"ruleId":"470","severity":1,"message":"471","line":34,"column":28,"nodeType":"472","messageId":"473","endLine":34,"endColumn":30},{"ruleId":"464","severity":1,"message":"480","line":18,"column":10,"nodeType":"466","messageId":"467","endLine":18,"endColumn":19},{"ruleId":"464","severity":1,"message":"492","line":24,"column":20,"nodeType":"466","messageId":"467","endLine":24,"endColumn":31},{"ruleId":"474","severity":1,"message":"475","line":41,"column":5,"nodeType":"476","messageId":"477","endLine":46,"endColumn":6},{"ruleId":"470","severity":1,"message":"478","line":42,"column":28,"nodeType":"472","messageId":"479","endLine":42,"endColumn":30},{"ruleId":"464","severity":1,"message":"493","line":103,"column":15,"nodeType":"466","messageId":"467","endLine":103,"endColumn":21},{"ruleId":"470","severity":1,"message":"478","line":104,"column":43,"nodeType":"472","messageId":"479","endLine":104,"endColumn":45},{"ruleId":"470","severity":1,"message":"478","line":198,"column":41,"nodeType":"472","messageId":"479","endLine":198,"endColumn":43},{"ruleId":"470","severity":1,"message":"471","line":278,"column":60,"nodeType":"472","messageId":"473","endLine":278,"endColumn":62},{"ruleId":"470","severity":1,"message":"471","line":304,"column":48,"nodeType":"472","messageId":"473","endLine":304,"endColumn":50},{"ruleId":"494","severity":1,"message":"495","line":71,"column":25,"nodeType":"496","endLine":71,"endColumn":39},{"ruleId":"494","severity":1,"message":"495","line":67,"column":25,"nodeType":"496","endLine":67,"endColumn":39},{"ruleId":"464","severity":1,"message":"497","line":30,"column":7,"nodeType":"466","messageId":"467","endLine":30,"endColumn":15},"no-native-reassign",["498"],"no-negated-in-lhs",["499"],"no-unused-vars","'setRole' is assigned a value but never used.","Identifier","unusedVar",["498"],["499"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Array.prototype.map() expects a return value from arrow function.","expectedInside","'isLoading' is assigned a value but never used.","Array.prototype.sort() expects a value to be returned at the end of arrow function.",["498"],["499"],"react/jsx-pascal-case","Imported JSX component Index_pro must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement",["498"],["499"],"Imported JSX component Index_admin must be in PascalCase or SCREAMING_SNAKE_CASE","ReturnStatement","expectedReturnValue","'setPaiement' is assigned a value but never used.","'status' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'ModalImg' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]